
LPS22HB_reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007590  08007590  00017590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007670  08007670  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007678  08007678  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000070  080076f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080076f0  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143b0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002471  00000000  00000000  00034450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  000368c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  00037ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002777b  00000000  00000000  00038be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015495  00000000  00000000  0006035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5bdb  00000000  00000000  000757f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b3cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005578  00000000  00000000  0016b41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007574 	.word	0x08007574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007574 	.word	0x08007574

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_GPIO_EXTI_Callback>:
}
*/


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13)
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ebc:	d102      	bne.n	8000ec4 <HAL_GPIO_EXTI_Callback+0x18>
    {
        B1_flag = 1;
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x24>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
    }
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	20000206 	.word	0x20000206

08000ed4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af04      	add	r7, sp, #16
 8000eda:	6078      	str	r0, [r7, #4]
    if(htim == &htim16)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d104      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eea:	f001 f8a1 	bl	8002030 <HAL_GPIO_TogglePin>
    }
    if(htim == &htim17)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d10c      	bne.n	8000f10 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
		HAL_I2C_Mem_Read(&hi2c1, ADDRESS, LPS22HB_PRESS_OUT_XL, 1, buffer, 5, HAL_MAX_DELAY);
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	2305      	movs	r3, #5
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	2228      	movs	r2, #40	; 0x28
 8000f08:	21ba      	movs	r1, #186	; 0xba
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f0c:	f001 fa66 	bl	80023dc <HAL_I2C_Mem_Read>
    }

}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200000e0 	.word	0x200000e0
 8000f1c:	2000012c 	.word	0x2000012c
 8000f20:	20000200 	.word	0x20000200
 8000f24:	2000008c 	.word	0x2000008c

08000f28 <ftoa>:
		i2c_flag = 1;
	}
}


void ftoa(float value, char* buffer, int bufferSize, int decimalDigits) {
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f32:	60b8      	str	r0, [r7, #8]
 8000f34:	6079      	str	r1, [r7, #4]
 8000f36:	603a      	str	r2, [r7, #0]
    int wholePart = (int)value;
 8000f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f40:	ee17 3a90 	vmov	r3, s15
 8000f44:	617b      	str	r3, [r7, #20]
    int fractionalPart = (int)((value - wholePart) * pow(10, decimalDigits));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f50:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f58:	ee17 0a90 	vmov	r0, s15
 8000f5c:	f7ff faf4 	bl	8000548 <__aeabi_f2d>
 8000f60:	4604      	mov	r4, r0
 8000f62:	460d      	mov	r5, r1
 8000f64:	6838      	ldr	r0, [r7, #0]
 8000f66:	f7ff fadd 	bl	8000524 <__aeabi_i2d>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	ec43 2b11 	vmov	d1, r2, r3
 8000f72:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8000fb8 <ftoa+0x90>
 8000f76:	f005 fbe3 	bl	8006740 <pow>
 8000f7a:	ec53 2b10 	vmov	r2, r3, d0
 8000f7e:	4620      	mov	r0, r4
 8000f80:	4629      	mov	r1, r5
 8000f82:	f7ff fb39 	bl	80005f8 <__aeabi_dmul>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fde3 	bl	8000b58 <__aeabi_d2iz>
 8000f92:	4603      	mov	r3, r0
 8000f94:	613b      	str	r3, [r7, #16]
    snprintf(buffer, bufferSize, "Preasure is: %d.%0*d hPa \n\r", wholePart, decimalDigits, fractionalPart);
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <ftoa+0x98>)
 8000fa4:	68b8      	ldr	r0, [r7, #8]
 8000fa6:	f004 ff49 	bl	8005e3c <sniprintf>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	40240000 	.word	0x40240000
 8000fc0:	08007590 	.word	0x08007590

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0a6      	sub	sp, #152	; 0x98
 8000fc8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f000 fc61 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f8c9 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 f9d9 	bl	8001388 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fd6:	f000 f9a7 	bl	8001328 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fda:	f000 f915 	bl	8001208 <MX_I2C1_Init>
  MX_TIM16_Init();
 8000fde:	f000 f953 	bl	8001288 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000fe2:	f000 f979 	bl	80012d8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000fe6:	4856      	ldr	r0, [pc, #344]	; (8001140 <main+0x17c>)
 8000fe8:	f003 ff3c 	bl	8004e64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 8000fec:	4855      	ldr	r0, [pc, #340]	; (8001144 <main+0x180>)
 8000fee:	f003 ff39 	bl	8004e64 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_NVIC_DisableIRQ(INTERRUPT_EXTI_IRQn);
 8000ff2:	2028      	movs	r0, #40	; 0x28
 8000ff4:	f000 fdf1 	bl	8001bda <HAL_NVIC_DisableIRQ>

	{
		uint8_t reg = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Read(&hi2c1, ADDRESS, LPS22HB_WHO_AM_I, 1, &reg, 1, HAL_MAX_DELAY);
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2301      	movs	r3, #1
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	1dfb      	adds	r3, r7, #7
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2301      	movs	r3, #1
 800100c:	220f      	movs	r2, #15
 800100e:	21ba      	movs	r1, #186	; 0xba
 8001010:	484d      	ldr	r0, [pc, #308]	; (8001148 <main+0x184>)
 8001012:	f001 f9e3 	bl	80023dc <HAL_I2C_Mem_Read>

		if(reg==0b10110001) {
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2bb1      	cmp	r3, #177	; 0xb1
 800101a:	d105      	bne.n	8001028 <main+0x64>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2120      	movs	r1, #32
 8001020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001024:	f000 ffec 	bl	8002000 <HAL_GPIO_WritePin>
	}

	{
		// BOOT
		// Software Reset
		uint8_t reg = (1<<7) || (1<<1);
 8001028:	2301      	movs	r3, #1
 800102a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, ADDRESS, LPS22HB_CTRL_REG2, 1, &reg, 1, HAL_MAX_DELAY);
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2301      	movs	r3, #1
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	1dbb      	adds	r3, r7, #6
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	2211      	movs	r2, #17
 800103e:	21ba      	movs	r1, #186	; 0xba
 8001040:	4841      	ldr	r0, [pc, #260]	; (8001148 <main+0x184>)
 8001042:	f001 f8b7 	bl	80021b4 <HAL_I2C_Mem_Write>
	}

	{
		// Output Data Rate 25Hz
		uint8_t reg = (3<<4);
 8001046:	2330      	movs	r3, #48	; 0x30
 8001048:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, ADDRESS, LPS22HB_CTRL_REG1, 1, &reg, 1, HAL_MAX_DELAY);
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	1d7b      	adds	r3, r7, #5
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	2210      	movs	r2, #16
 800105c:	21ba      	movs	r1, #186	; 0xba
 800105e:	483a      	ldr	r0, [pc, #232]	; (8001148 <main+0x184>)
 8001060:	f001 f8a8 	bl	80021b4 <HAL_I2C_Mem_Write>
	}

	{
		// Register address automatically incremented
		uint8_t reg = (1<<4);
 8001064:	2310      	movs	r3, #16
 8001066:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, ADDRESS, LPS22HB_CTRL_REG2, 1, &reg, 1, HAL_MAX_DELAY);
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2301      	movs	r3, #1
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	2211      	movs	r2, #17
 800107a:	21ba      	movs	r1, #186	; 0xba
 800107c:	4832      	ldr	r0, [pc, #200]	; (8001148 <main+0x184>)
 800107e:	f001 f899 	bl	80021b4 <HAL_I2C_Mem_Write>
	}

	{
		// DRDY interrupt
		uint8_t reg = (1<<2);
 8001082:	2304      	movs	r3, #4
 8001084:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1, ADDRESS, LPS22HB_CTRL_REG3, 1, &reg, 1, HAL_MAX_DELAY);
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	1cfb      	adds	r3, r7, #3
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	2212      	movs	r2, #18
 8001098:	21ba      	movs	r1, #186	; 0xba
 800109a:	482b      	ldr	r0, [pc, #172]	; (8001148 <main+0x184>)
 800109c:	f001 f88a 	bl	80021b4 <HAL_I2C_Mem_Write>
	}

	HAL_NVIC_EnableIRQ(INTERRUPT_EXTI_IRQn);
 80010a0:	2028      	movs	r0, #40	; 0x28
 80010a2:	f000 fd8c 	bl	8001bbe <HAL_NVIC_EnableIRQ>

	// dummy read
	HAL_I2C_Mem_Read(&hi2c1, ADDRESS, LPS22HB_PRESS_OUT_XL, 1, buffer, 5, HAL_MAX_DELAY);
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	2305      	movs	r3, #5
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <main+0x188>)
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	2228      	movs	r2, #40	; 0x28
 80010b8:	21ba      	movs	r1, #186	; 0xba
 80010ba:	4823      	ldr	r0, [pc, #140]	; (8001148 <main+0x184>)
 80010bc:	f001 f98e 	bl	80023dc <HAL_I2C_Mem_Read>

	// uart2 buffer
	char uart_buffer[64];
	char b1_buffer[64];
	snprintf(b1_buffer, sizeof(b1_buffer), "Wcisnieto przycsk!\n\r" );
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	4a22      	ldr	r2, [pc, #136]	; (8001150 <main+0x18c>)
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	4618      	mov	r0, r3
 80010ca:	f004 feb7 	bl	8005e3c <sniprintf>

  while(1) {

	  if(i2c_flag)
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <main+0x190>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d01c      	beq.n	8001112 <main+0x14e>
//
//		pressure_hPa = pressure_raw/4096.f;
//		temperature_C = temperature_raw/100.f;
//		sprintf(uart_buffer, sizeof(uart_buffer), "Poimar cisnienia: %.2f hPa\n\r", pressure_hPa);

		ftoa(pressure_hPa, uart_buffer, sizeof(uart_buffer), 2);
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <main+0x194>)
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010e2:	2202      	movs	r2, #2
 80010e4:	2140      	movs	r1, #64	; 0x40
 80010e6:	4618      	mov	r0, r3
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	f7ff ff1c 	bl	8000f28 <ftoa>
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80010f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f86b 	bl	80001d0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	4815      	ldr	r0, [pc, #84]	; (800115c <main+0x198>)
 8001108:	f004 f96a 	bl	80053e0 <HAL_UART_Transmit>
		i2c_flag = 0;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <main+0x190>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
	  }
	  if(B1_flag)
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <main+0x19c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0d8      	beq.n	80010ce <main+0x10a>
	  {
		  HAL_UART_Transmit(&huart2, (uint8_t *)b1_buffer, strlen(b1_buffer), HAL_MAX_DELAY);
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f855 	bl	80001d0 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	f107 0108 	add.w	r1, r7, #8
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	480a      	ldr	r0, [pc, #40]	; (800115c <main+0x198>)
 8001134:	f004 f954 	bl	80053e0 <HAL_UART_Transmit>
		  B1_flag = 0;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <main+0x19c>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
	  if(i2c_flag)
 800113e:	e7c6      	b.n	80010ce <main+0x10a>
 8001140:	200000e0 	.word	0x200000e0
 8001144:	2000012c 	.word	0x2000012c
 8001148:	2000008c 	.word	0x2000008c
 800114c:	20000200 	.word	0x20000200
 8001150:	080075ac 	.word	0x080075ac
 8001154:	20000205 	.word	0x20000205
 8001158:	200001fc 	.word	0x200001fc
 800115c:	20000178 	.word	0x20000178
 8001160:	20000206 	.word	0x20000206

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b096      	sub	sp, #88	; 0x58
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	2244      	movs	r2, #68	; 0x44
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f004 fe5a 	bl	8005e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	463b      	mov	r3, r7
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001186:	f44f 7000 	mov.w	r0, #512	; 0x200
 800118a:	f002 fb01 	bl	8003790 <HAL_PWREx_ControlVoltageScaling>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001194:	f000 f976 	bl	8001484 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001198:	2302      	movs	r3, #2
 800119a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a2:	2310      	movs	r3, #16
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a6:	2302      	movs	r3, #2
 80011a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011aa:	2302      	movs	r3, #2
 80011ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011b2:	230a      	movs	r3, #10
 80011b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011b6:	2307      	movs	r3, #7
 80011b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011be:	2302      	movs	r3, #2
 80011c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 fb38 	bl	800383c <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011d2:	f000 f957 	bl	8001484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
 80011d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2303      	movs	r3, #3
 80011dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	2104      	movs	r1, #4
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 ff00 	bl	8003ff4 <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011fa:	f000 f943 	bl	8001484 <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	3758      	adds	r7, #88	; 0x58
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_I2C1_Init+0x74>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <MX_I2C1_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_I2C1_Init+0x74>)
 8001214:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <MX_I2C1_Init+0x7c>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_I2C1_Init+0x74>)
 8001220:	2201      	movs	r2, #1
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_I2C1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_I2C1_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_I2C1_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001242:	480e      	ldr	r0, [pc, #56]	; (800127c <MX_I2C1_Init+0x74>)
 8001244:	f000 ff26 	bl	8002094 <HAL_I2C_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800124e:	f000 f919 	bl	8001484 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <MX_I2C1_Init+0x74>)
 8001256:	f002 f9f5 	bl	8003644 <HAL_I2CEx_ConfigAnalogFilter>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001260:	f000 f910 	bl	8001484 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_I2C1_Init+0x74>)
 8001268:	f002 fa37 	bl	80036da <HAL_I2CEx_ConfigDigitalFilter>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001272:	f000 f907 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000008c 	.word	0x2000008c
 8001280:	40005400 	.word	0x40005400
 8001284:	10909cec 	.word	0x10909cec

08001288 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_TIM16_Init+0x48>)
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <MX_TIM16_Init+0x4c>)
 8001290:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_TIM16_Init+0x48>)
 8001294:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001298:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <MX_TIM16_Init+0x48>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 384-1;
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_TIM16_Init+0x48>)
 80012a2:	f240 127f 	movw	r2, #383	; 0x17f
 80012a6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_TIM16_Init+0x48>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_TIM16_Init+0x48>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_TIM16_Init+0x48>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_TIM16_Init+0x48>)
 80012bc:	f003 fd7a 	bl	8004db4 <HAL_TIM_Base_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80012c6:	f000 f8dd 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000e0 	.word	0x200000e0
 80012d4:	40014400 	.word	0x40014400

080012d8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_TIM17_Init+0x48>)
 80012de:	4a11      	ldr	r2, [pc, #68]	; (8001324 <MX_TIM17_Init+0x4c>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000-1;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_TIM17_Init+0x48>)
 80012e4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012e8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <MX_TIM17_Init+0x48>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 909-1;
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_TIM17_Init+0x48>)
 80012f2:	f44f 7263 	mov.w	r2, #908	; 0x38c
 80012f6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_TIM17_Init+0x48>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_TIM17_Init+0x48>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_TIM17_Init+0x48>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_TIM17_Init+0x48>)
 800130c:	f003 fd52 	bl	8004db4 <HAL_TIM_Base_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001316:	f000 f8b5 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000012c 	.word	0x2000012c
 8001324:	40014800 	.word	0x40014800

08001328 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_USART2_UART_Init+0x58>)
 800132e:	4a15      	ldr	r2, [pc, #84]	; (8001384 <MX_USART2_UART_Init+0x5c>)
 8001330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <MX_USART2_UART_Init+0x58>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_USART2_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_USART2_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_USART2_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_USART2_UART_Init+0x58>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_USART2_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_USART2_UART_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <MX_USART2_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_USART2_UART_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_USART2_UART_Init+0x58>)
 800136c:	f003 ffea 	bl	8005344 <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001376:	f000 f885 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000178 	.word	0x20000178
 8001384:	40004400 	.word	0x40004400

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <MX_GPIO_Init+0xf0>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a35      	ldr	r2, [pc, #212]	; (8001478 <MX_GPIO_Init+0xf0>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b33      	ldr	r3, [pc, #204]	; (8001478 <MX_GPIO_Init+0xf0>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <MX_GPIO_Init+0xf0>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <MX_GPIO_Init+0xf0>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <MX_GPIO_Init+0xf0>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <MX_GPIO_Init+0xf0>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a29      	ldr	r2, [pc, #164]	; (8001478 <MX_GPIO_Init+0xf0>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <MX_GPIO_Init+0xf0>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <MX_GPIO_Init+0xf0>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a23      	ldr	r2, [pc, #140]	; (8001478 <MX_GPIO_Init+0xf0>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <MX_GPIO_Init+0xf0>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2120      	movs	r1, #32
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f000 fdfb 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800140a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001410:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4816      	ldr	r0, [pc, #88]	; (800147c <MX_GPIO_Init+0xf4>)
 8001422:	f000 fc43 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001426:	2320      	movs	r3, #32
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001440:	f000 fc34 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800144e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4809      	ldr	r0, [pc, #36]	; (8001480 <MX_GPIO_Init+0xf8>)
 800145c:	f000 fc26 	bl	8001cac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2028      	movs	r0, #40	; 0x28
 8001466:	f000 fb8e 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800146a:	2028      	movs	r0, #40	; 0x28
 800146c:	f000 fba7 	bl	8001bbe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	48000800 	.word	0x48000800
 8001480:	48000400 	.word	0x48000400

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800148c:	e7fe      	b.n	800148c <Error_Handler+0x8>
	...

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_MspInit+0x44>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_MspInit+0x44>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6613      	str	r3, [r2, #96]	; 0x60
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_MspInit+0x44>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_MspInit+0x44>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_MspInit+0x44>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_MspInit+0x44>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000

080014d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b0ac      	sub	sp, #176	; 0xb0
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2288      	movs	r2, #136	; 0x88
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f004 fc97 	bl	8005e2c <memset>
  if(hi2c->Instance==I2C1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a29      	ldr	r2, [pc, #164]	; (80015a8 <HAL_I2C_MspInit+0xd0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d14b      	bne.n	80015a0 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001508:	2340      	movs	r3, #64	; 0x40
 800150a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800150c:	2300      	movs	r3, #0
 800150e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4618      	mov	r0, r3
 8001516:	f002 ff91 	bl	800443c <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001520:	f7ff ffb0 	bl	8001484 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_I2C_MspInit+0xd4>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	4a20      	ldr	r2, [pc, #128]	; (80015ac <HAL_I2C_MspInit+0xd4>)
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <HAL_I2C_MspInit+0xd4>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800153c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001556:	2304      	movs	r3, #4
 8001558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001560:	4619      	mov	r1, r3
 8001562:	4813      	ldr	r0, [pc, #76]	; (80015b0 <HAL_I2C_MspInit+0xd8>)
 8001564:	f000 fba2 	bl	8001cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001568:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_I2C_MspInit+0xd4>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <HAL_I2C_MspInit+0xd4>)
 800156e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001572:	6593      	str	r3, [r2, #88]	; 0x58
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_I2C_MspInit+0xd4>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	201f      	movs	r0, #31
 8001586:	f000 fafe 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800158a:	201f      	movs	r0, #31
 800158c:	f000 fb17 	bl	8001bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2020      	movs	r0, #32
 8001596:	f000 faf6 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800159a:	2020      	movs	r0, #32
 800159c:	f000 fb0f 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015a0:	bf00      	nop
 80015a2:	37b0      	adds	r7, #176	; 0xb0
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40005400 	.word	0x40005400
 80015ac:	40021000 	.word	0x40021000
 80015b0:	48000400 	.word	0x48000400

080015b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1a      	ldr	r2, [pc, #104]	; (800162c <HAL_TIM_Base_MspInit+0x78>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d114      	bne.n	80015f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_TIM_Base_MspInit+0x7c>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ca:	4a19      	ldr	r2, [pc, #100]	; (8001630 <HAL_TIM_Base_MspInit+0x7c>)
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	6613      	str	r3, [r2, #96]	; 0x60
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_TIM_Base_MspInit+0x7c>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2019      	movs	r0, #25
 80015e4:	f000 facf 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80015e8:	2019      	movs	r0, #25
 80015ea:	f000 fae8 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80015ee:	e018      	b.n	8001622 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <HAL_TIM_Base_MspInit+0x80>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d113      	bne.n	8001622 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_TIM_Base_MspInit+0x7c>)
 80015fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fe:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <HAL_TIM_Base_MspInit+0x7c>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001604:	6613      	str	r3, [r2, #96]	; 0x60
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_TIM_Base_MspInit+0x7c>)
 8001608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	201a      	movs	r0, #26
 8001618:	f000 fab5 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800161c:	201a      	movs	r0, #26
 800161e:	f000 face 	bl	8001bbe <HAL_NVIC_EnableIRQ>
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40014400 	.word	0x40014400
 8001630:	40021000 	.word	0x40021000
 8001634:	40014800 	.word	0x40014800

08001638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b0ac      	sub	sp, #176	; 0xb0
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2288      	movs	r2, #136	; 0x88
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f004 fbe7 	bl	8005e2c <memset>
  if(huart->Instance==USART2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a21      	ldr	r2, [pc, #132]	; (80016e8 <HAL_UART_MspInit+0xb0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d13b      	bne.n	80016e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001668:	2302      	movs	r3, #2
 800166a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800166c:	2300      	movs	r3, #0
 800166e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4618      	mov	r0, r3
 8001676:	f002 fee1 	bl	800443c <HAL_RCCEx_PeriphCLKConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001680:	f7ff ff00 	bl	8001484 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_UART_MspInit+0xb4>)
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <HAL_UART_MspInit+0xb4>)
 800168a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168e:	6593      	str	r3, [r2, #88]	; 0x58
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HAL_UART_MspInit+0xb4>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_UART_MspInit+0xb4>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a0:	4a12      	ldr	r2, [pc, #72]	; (80016ec <HAL_UART_MspInit+0xb4>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_UART_MspInit+0xb4>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016b4:	230c      	movs	r3, #12
 80016b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016cc:	2307      	movs	r3, #7
 80016ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016dc:	f000 fae6 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	37b0      	adds	r7, #176	; 0xb0
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40004400 	.word	0x40004400
 80016ec:	40021000 	.word	0x40021000

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173c:	f000 f904 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800174a:	f003 fbfb 	bl	8004f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200000e0 	.word	0x200000e0

08001758 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800175e:	f003 fbf1 	bl	8004f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000012c 	.word	0x2000012c

0800176c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <I2C1_EV_IRQHandler+0x10>)
 8001772:	f000 ff4d 	bl	8002610 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000008c 	.word	0x2000008c

08001780 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <I2C1_ER_IRQHandler+0x10>)
 8001786:	f000 ff5d 	bl	8002644 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000008c 	.word	0x2000008c

08001794 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001798:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800179c:	f000 fc62 	bl	8002064 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017a4:	f000 fc5e 	bl	8002064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f004 fafc 	bl	8005dd8 <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20018000 	.word	0x20018000
 800180c:	00000400 	.word	0x00000400
 8001810:	20000208 	.word	0x20000208
 8001814:	20000220 	.word	0x20000220

08001818 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001840:	f7ff ffea 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <LoopForever+0x6>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	; (800187c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <LoopForever+0xe>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <LoopForever+0x16>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186a:	f004 fabb 	bl	8005de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800186e:	f7ff fba9 	bl	8000fc4 <main>

08001872 <LoopForever>:

LoopForever:
    b LoopForever
 8001872:	e7fe      	b.n	8001872 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001874:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001880:	08007680 	.word	0x08007680
  ldr r2, =_sbss
 8001884:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001888:	20000220 	.word	0x20000220

0800188c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_2_IRQHandler>
	...

08001890 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_Init+0x3c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_Init+0x3c>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a6:	2003      	movs	r0, #3
 80018a8:	f000 f962 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ac:	2000      	movs	r0, #0
 80018ae:	f000 f80f 	bl	80018d0 <HAL_InitTick>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	71fb      	strb	r3, [r7, #7]
 80018bc:	e001      	b.n	80018c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018be:	f7ff fde7 	bl	8001490 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c2:	79fb      	ldrb	r3, [r7, #7]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40022000 	.word	0x40022000

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_InitTick+0x6c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d023      	beq.n	800192c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_InitTick+0x70>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_InitTick+0x6c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f97b 	bl	8001bf6 <HAL_SYSTICK_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10f      	bne.n	8001926 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d809      	bhi.n	8001920 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 f937 	bl	8001b86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001918:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <HAL_InitTick+0x74>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e007      	b.n	8001930 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	e004      	b.n	8001930 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	73fb      	strb	r3, [r7, #15]
 800192a:	e001      	b.n	8001930 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008
 8001940:	20000000 	.word	0x20000000
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008
 800196c:	2000020c 	.word	0x2000020c

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	2000020c 	.word	0x2000020c

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db12      	blt.n	8001a60 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	490a      	ldr	r1, [pc, #40]	; (8001a6c <__NVIC_DisableIRQ+0x44>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	3320      	adds	r3, #32
 8001a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a54:	f3bf 8f4f 	dsb	sy
}
 8001a58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a5a:	f3bf 8f6f 	isb	sy
}
 8001a5e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	; (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	; (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f7ff ff8e 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff05 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff1a 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff8e 	bl	8001ac4 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5d 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff0d 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff1d 	bl	8001a28 <__NVIC_DisableIRQ>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ff94 	bl	8001b2c <SysTick_Config>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d005      	beq.n	8001c32 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e029      	b.n	8001c86 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 020e 	bic.w	r2, r2, #14
 8001c40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f003 021c 	and.w	r2, r3, #28
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
    }
  }
  return status;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c9e:	b2db      	uxtb	r3, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cba:	e17f      	b.n	8001fbc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8171 	beq.w	8001fb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d005      	beq.n	8001cec <HAL_GPIO_Init+0x40>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d130      	bne.n	8001d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d22:	2201      	movs	r2, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	f003 0201 	and.w	r2, r3, #1
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d118      	bne.n	8001d8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d60:	2201      	movs	r2, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	f003 0201 	and.w	r2, r3, #1
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d017      	beq.n	8001dc8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d123      	bne.n	8001e1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	6939      	ldr	r1, [r7, #16]
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80ac 	beq.w	8001fb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	4b5f      	ldr	r3, [pc, #380]	; (8001fdc <HAL_GPIO_Init+0x330>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e62:	4a5e      	ldr	r2, [pc, #376]	; (8001fdc <HAL_GPIO_Init+0x330>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6a:	4b5c      	ldr	r3, [pc, #368]	; (8001fdc <HAL_GPIO_Init+0x330>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e76:	4a5a      	ldr	r2, [pc, #360]	; (8001fe0 <HAL_GPIO_Init+0x334>)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ea0:	d025      	beq.n	8001eee <HAL_GPIO_Init+0x242>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4f      	ldr	r2, [pc, #316]	; (8001fe4 <HAL_GPIO_Init+0x338>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d01f      	beq.n	8001eea <HAL_GPIO_Init+0x23e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4e      	ldr	r2, [pc, #312]	; (8001fe8 <HAL_GPIO_Init+0x33c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d019      	beq.n	8001ee6 <HAL_GPIO_Init+0x23a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4d      	ldr	r2, [pc, #308]	; (8001fec <HAL_GPIO_Init+0x340>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0x236>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	; (8001ff0 <HAL_GPIO_Init+0x344>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00d      	beq.n	8001ede <HAL_GPIO_Init+0x232>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4b      	ldr	r2, [pc, #300]	; (8001ff4 <HAL_GPIO_Init+0x348>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d007      	beq.n	8001eda <HAL_GPIO_Init+0x22e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4a      	ldr	r2, [pc, #296]	; (8001ff8 <HAL_GPIO_Init+0x34c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_GPIO_Init+0x22a>
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	e00c      	b.n	8001ef0 <HAL_GPIO_Init+0x244>
 8001ed6:	2307      	movs	r3, #7
 8001ed8:	e00a      	b.n	8001ef0 <HAL_GPIO_Init+0x244>
 8001eda:	2305      	movs	r3, #5
 8001edc:	e008      	b.n	8001ef0 <HAL_GPIO_Init+0x244>
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x244>
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e004      	b.n	8001ef0 <HAL_GPIO_Init+0x244>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_Init+0x244>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_GPIO_Init+0x244>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	f002 0203 	and.w	r2, r2, #3
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	4093      	lsls	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f00:	4937      	ldr	r1, [pc, #220]	; (8001fe0 <HAL_GPIO_Init+0x334>)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <HAL_GPIO_Init+0x350>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f32:	4a32      	ldr	r2, [pc, #200]	; (8001ffc <HAL_GPIO_Init+0x350>)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f38:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <HAL_GPIO_Init+0x350>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <HAL_GPIO_Init+0x350>)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f62:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <HAL_GPIO_Init+0x350>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f86:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <HAL_GPIO_Init+0x350>)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_GPIO_Init+0x350>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_GPIO_Init+0x350>)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f47f ae78 	bne.w	8001cbc <HAL_GPIO_Init+0x10>
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	48000400 	.word	0x48000400
 8001fe8:	48000800 	.word	0x48000800
 8001fec:	48000c00 	.word	0x48000c00
 8001ff0:	48001000 	.word	0x48001000
 8001ff4:	48001400 	.word	0x48001400
 8001ff8:	48001800 	.word	0x48001800
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800201c:	e002      	b.n	8002024 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002042:	887a      	ldrh	r2, [r7, #2]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43d9      	mvns	r1, r3
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	400b      	ands	r3, r1
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d006      	beq.n	8002088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe ff12 	bl	8000eac <HAL_GPIO_EXTI_Callback>
  }
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e081      	b.n	80021aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fa0c 	bl	80014d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2224      	movs	r2, #36	; 0x24
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	e006      	b.n	800211c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800211a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d104      	bne.n	800212e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800212c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800213c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002140:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002150:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69d9      	ldr	r1, [r3, #28]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1a      	ldr	r2, [r3, #32]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	817b      	strh	r3, [r7, #10]
 80021c6:	460b      	mov	r3, r1
 80021c8:	813b      	strh	r3, [r7, #8]
 80021ca:	4613      	mov	r3, r2
 80021cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	f040 80f9 	bne.w	80023ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_I2C_Mem_Write+0x34>
 80021e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0ed      	b.n	80023d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_I2C_Mem_Write+0x4e>
 80021fe:	2302      	movs	r3, #2
 8002200:	e0e6      	b.n	80023d0 <HAL_I2C_Mem_Write+0x21c>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800220a:	f7ff fbb1 	bl	8001970 <HAL_GetTick>
 800220e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2319      	movs	r3, #25
 8002216:	2201      	movs	r2, #1
 8002218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 ffd8 	bl	80031d2 <I2C_WaitOnFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0d1      	b.n	80023d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2221      	movs	r2, #33	; 0x21
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2240      	movs	r2, #64	; 0x40
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800224c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002254:	88f8      	ldrh	r0, [r7, #6]
 8002256:	893a      	ldrh	r2, [r7, #8]
 8002258:	8979      	ldrh	r1, [r7, #10]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	4603      	mov	r3, r0
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fb91 	bl	800298c <I2C_RequestMemoryWrite>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0a9      	b.n	80023d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	2bff      	cmp	r3, #255	; 0xff
 8002284:	d90e      	bls.n	80022a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	22ff      	movs	r2, #255	; 0xff
 800228a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	b2da      	uxtb	r2, r3
 8002292:	8979      	ldrh	r1, [r7, #10]
 8002294:	2300      	movs	r3, #0
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f001 f941 	bl	8003524 <I2C_TransferConfig>
 80022a2:	e00f      	b.n	80022c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	8979      	ldrh	r1, [r7, #10]
 80022b6:	2300      	movs	r3, #0
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f001 f930 	bl	8003524 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 ffc2 	bl	8003252 <I2C_WaitOnTXISFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e07b      	b.n	80023d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d034      	beq.n	800237c <HAL_I2C_Mem_Write+0x1c8>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	2b00      	cmp	r3, #0
 8002318:	d130      	bne.n	800237c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	2200      	movs	r2, #0
 8002322:	2180      	movs	r1, #128	; 0x80
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 ff54 	bl	80031d2 <I2C_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e04d      	b.n	80023d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	2bff      	cmp	r3, #255	; 0xff
 800233c:	d90e      	bls.n	800235c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	22ff      	movs	r2, #255	; 0xff
 8002342:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	b2da      	uxtb	r2, r3
 800234a:	8979      	ldrh	r1, [r7, #10]
 800234c:	2300      	movs	r3, #0
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f001 f8e5 	bl	8003524 <I2C_TransferConfig>
 800235a:	e00f      	b.n	800237c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	b2da      	uxtb	r2, r3
 800236c:	8979      	ldrh	r1, [r7, #10]
 800236e:	2300      	movs	r3, #0
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f001 f8d4 	bl	8003524 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d19e      	bne.n	80022c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 ffa1 	bl	80032d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e01a      	b.n	80023d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2220      	movs	r2, #32
 80023a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_I2C_Mem_Write+0x224>)
 80023ae:	400b      	ands	r3, r1
 80023b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80023ce:	2302      	movs	r3, #2
  }
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	fe00e800 	.word	0xfe00e800

080023dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	817b      	strh	r3, [r7, #10]
 80023ee:	460b      	mov	r3, r1
 80023f0:	813b      	strh	r3, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b20      	cmp	r3, #32
 8002400:	f040 80fd 	bne.w	80025fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_I2C_Mem_Read+0x34>
 800240a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002416:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0f1      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_I2C_Mem_Read+0x4e>
 8002426:	2302      	movs	r3, #2
 8002428:	e0ea      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002432:	f7ff fa9d 	bl	8001970 <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2319      	movs	r3, #25
 800243e:	2201      	movs	r2, #1
 8002440:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fec4 	bl	80031d2 <I2C_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d5      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2222      	movs	r2, #34	; 0x22
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2240      	movs	r2, #64	; 0x40
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002474:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800247c:	88f8      	ldrh	r0, [r7, #6]
 800247e:	893a      	ldrh	r2, [r7, #8]
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	4603      	mov	r3, r0
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fad1 	bl	8002a34 <I2C_RequestMemoryRead>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0ad      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2bff      	cmp	r3, #255	; 0xff
 80024ac:	d90e      	bls.n	80024cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	22ff      	movs	r2, #255	; 0xff
 80024b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	8979      	ldrh	r1, [r7, #10]
 80024bc:	4b52      	ldr	r3, [pc, #328]	; (8002608 <HAL_I2C_Mem_Read+0x22c>)
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f001 f82d 	bl	8003524 <I2C_TransferConfig>
 80024ca:	e00f      	b.n	80024ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	8979      	ldrh	r1, [r7, #10]
 80024de:	4b4a      	ldr	r3, [pc, #296]	; (8002608 <HAL_I2C_Mem_Read+0x22c>)
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f001 f81c 	bl	8003524 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f2:	2200      	movs	r2, #0
 80024f4:	2104      	movs	r1, #4
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fe6b 	bl	80031d2 <I2C_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e07c      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d034      	beq.n	80025ac <HAL_I2C_Mem_Read+0x1d0>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	2b00      	cmp	r3, #0
 8002548:	d130      	bne.n	80025ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	2200      	movs	r2, #0
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fe3c 	bl	80031d2 <I2C_WaitOnFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e04d      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	2bff      	cmp	r3, #255	; 0xff
 800256c:	d90e      	bls.n	800258c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	b2da      	uxtb	r2, r3
 800257a:	8979      	ldrh	r1, [r7, #10]
 800257c:	2300      	movs	r3, #0
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 ffcd 	bl	8003524 <I2C_TransferConfig>
 800258a:	e00f      	b.n	80025ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	b2da      	uxtb	r2, r3
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	2300      	movs	r3, #0
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 ffbc 	bl	8003524 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d19a      	bne.n	80024ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fe89 	bl	80032d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e01a      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2220      	movs	r2, #32
 80025d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_I2C_Mem_Read+0x230>)
 80025de:	400b      	ands	r3, r1
 80025e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80025fe:	2302      	movs	r3, #2
  }
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	80002400 	.word	0x80002400
 800260c:	fe00e800 	.word	0xfe00e800

08002610 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	68f9      	ldr	r1, [r7, #12]
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
  }
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d010      	beq.n	800268a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	09db      	lsrs	r3, r3, #7
 800266c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	f043 0201 	orr.w	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002688:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	0a9b      	lsrs	r3, r3, #10
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d010      	beq.n	80026b8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	09db      	lsrs	r3, r3, #7
 800269a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	f043 0208 	orr.w	r2, r3, #8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	0a5b      	lsrs	r3, r3, #9
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d010      	beq.n	80026e6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	09db      	lsrs	r3, r3, #7
 80026c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0202 	orr.w	r2, r3, #2
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 030b 	and.w	r3, r3, #11
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fc31 	bl	8002f60 <I2C_ITError>
  }
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	70fb      	strb	r3, [r7, #3]
 800273a:	4613      	mov	r3, r2
 800273c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <I2C_Slave_ISR_IT+0x24>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e0ec      	b.n	8002984 <I2C_Slave_ISR_IT+0x1fe>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80027ca:	6939      	ldr	r1, [r7, #16]
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 fa67 	bl	8002ca0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d04d      	beq.n	800287a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d047      	beq.n	800287a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d128      	bne.n	8002846 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b28      	cmp	r3, #40	; 0x28
 80027fe:	d108      	bne.n	8002812 <I2C_Slave_ISR_IT+0x8c>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002806:	d104      	bne.n	8002812 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002808:	6939      	ldr	r1, [r7, #16]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fb52 	bl	8002eb4 <I2C_ITListenCplt>
 8002810:	e032      	b.n	8002878 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b29      	cmp	r3, #41	; 0x29
 800281c:	d10e      	bne.n	800283c <I2C_Slave_ISR_IT+0xb6>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002824:	d00a      	beq.n	800283c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2210      	movs	r2, #16
 800282c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fc8d 	bl	800314e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f9d5 	bl	8002be4 <I2C_ITSlaveSeqCplt>
 800283a:	e01d      	b.n	8002878 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2210      	movs	r2, #16
 8002842:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002844:	e096      	b.n	8002974 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2210      	movs	r2, #16
 800284c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f043 0204 	orr.w	r2, r3, #4
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d004      	beq.n	800286a <I2C_Slave_ISR_IT+0xe4>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002866:	f040 8085 	bne.w	8002974 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	4619      	mov	r1, r3
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fb75 	bl	8002f60 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002876:	e07d      	b.n	8002974 <I2C_Slave_ISR_IT+0x1ee>
 8002878:	e07c      	b.n	8002974 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d030      	beq.n	80028e8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800288e:	2b00      	cmp	r3, #0
 8002890:	d02a      	beq.n	80028e8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d018      	beq.n	80028ce <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d14f      	bne.n	8002978 <I2C_Slave_ISR_IT+0x1f2>
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028de:	d04b      	beq.n	8002978 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f97f 	bl	8002be4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80028e6:	e047      	b.n	8002978 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	08db      	lsrs	r3, r3, #3
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	08db      	lsrs	r3, r3, #3
 80028f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d004      	beq.n	800290a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002900:	6939      	ldr	r1, [r7, #16]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f8ea 	bl	8002adc <I2C_ITAddrCplt>
 8002908:	e037      	b.n	800297a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d031      	beq.n	800297a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800291e:	2b00      	cmp	r3, #0
 8002920:	d02b      	beq.n	800297a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d018      	beq.n	800295e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	; 0x28
 800295c:	e00d      	b.n	800297a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002964:	d002      	beq.n	800296c <I2C_Slave_ISR_IT+0x1e6>
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f939 	bl	8002be4 <I2C_ITSlaveSeqCplt>
 8002972:	e002      	b.n	800297a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002978:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	4608      	mov	r0, r1
 8002996:	4611      	mov	r1, r2
 8002998:	461a      	mov	r2, r3
 800299a:	4603      	mov	r3, r0
 800299c:	817b      	strh	r3, [r7, #10]
 800299e:	460b      	mov	r3, r1
 80029a0:	813b      	strh	r3, [r7, #8]
 80029a2:	4613      	mov	r3, r2
 80029a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	8979      	ldrh	r1, [r7, #10]
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <I2C_RequestMemoryWrite+0xa4>)
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fdb5 	bl	8003524 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	69b9      	ldr	r1, [r7, #24]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fc47 	bl	8003252 <I2C_WaitOnTXISFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e02c      	b.n	8002a28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ce:	88fb      	ldrh	r3, [r7, #6]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029d4:	893b      	ldrh	r3, [r7, #8]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	629a      	str	r2, [r3, #40]	; 0x28
 80029de:	e015      	b.n	8002a0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029e0:	893b      	ldrh	r3, [r7, #8]
 80029e2:	0a1b      	lsrs	r3, r3, #8
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	69b9      	ldr	r1, [r7, #24]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fc2d 	bl	8003252 <I2C_WaitOnTXISFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e012      	b.n	8002a28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a02:	893b      	ldrh	r3, [r7, #8]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2180      	movs	r1, #128	; 0x80
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fbdb 	bl	80031d2 <I2C_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	80002000 	.word	0x80002000

08002a34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	4611      	mov	r1, r2
 8002a40:	461a      	mov	r2, r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	817b      	strh	r3, [r7, #10]
 8002a46:	460b      	mov	r3, r1
 8002a48:	813b      	strh	r3, [r7, #8]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	8979      	ldrh	r1, [r7, #10]
 8002a54:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <I2C_RequestMemoryRead+0xa4>)
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fd62 	bl	8003524 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	69b9      	ldr	r1, [r7, #24]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fbf4 	bl	8003252 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e02c      	b.n	8002ace <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d105      	bne.n	8002a86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7a:	893b      	ldrh	r3, [r7, #8]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
 8002a84:	e015      	b.n	8002ab2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a86:	893b      	ldrh	r3, [r7, #8]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fbda 	bl	8003252 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e012      	b.n	8002ace <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa8:	893b      	ldrh	r3, [r7, #8]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2140      	movs	r1, #64	; 0x40
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 fb88 	bl	80031d2 <I2C_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	80002000 	.word	0x80002000

08002adc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002af2:	2b28      	cmp	r3, #40	; 0x28
 8002af4:	d16a      	bne.n	8002bcc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	0c1b      	lsrs	r3, r3, #16
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b14:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b22:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b30:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d138      	bne.n	8002bac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002b3a:	897b      	ldrh	r3, [r7, #10]
 8002b3c:	09db      	lsrs	r3, r3, #7
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	89bb      	ldrh	r3, [r7, #12]
 8002b42:	4053      	eors	r3, r2
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f003 0306 	and.w	r3, r3, #6
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11c      	bne.n	8002b88 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002b4e:	897b      	ldrh	r3, [r7, #10]
 8002b50:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d13b      	bne.n	8002bdc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2208      	movs	r2, #8
 8002b70:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b7a:	89ba      	ldrh	r2, [r7, #12]
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff fdd4 	bl	800272e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002b86:	e029      	b.n	8002bdc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002b88:	893b      	ldrh	r3, [r7, #8]
 8002b8a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fcf9 	bl	8003588 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b9e:	89ba      	ldrh	r2, [r7, #12]
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fdc2 	bl	800272e <HAL_I2C_AddrCallback>
}
 8002baa:	e017      	b.n	8002bdc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fce9 	bl	8003588 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002bbe:	89ba      	ldrh	r2, [r7, #12]
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff fdb2 	bl	800272e <HAL_I2C_AddrCallback>
}
 8002bca:	e007      	b.n	8002bdc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	0b9b      	lsrs	r3, r3, #14
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e00d      	b.n	8002c36 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	0bdb      	lsrs	r3, r3, #15
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c34:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b29      	cmp	r3, #41	; 0x29
 8002c40:	d112      	bne.n	8002c68 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2228      	movs	r2, #40	; 0x28
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2221      	movs	r2, #33	; 0x21
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c50:	2101      	movs	r1, #1
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fc98 	bl	8003588 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff fd50 	bl	8002706 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c66:	e017      	b.n	8002c98 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b2a      	cmp	r3, #42	; 0x2a
 8002c72:	d111      	bne.n	8002c98 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2228      	movs	r2, #40	; 0x28
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2222      	movs	r2, #34	; 0x22
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c82:	2102      	movs	r1, #2
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fc7f 	bl	8003588 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff fd41 	bl	800271a <HAL_I2C_SlaveRxCpltCallback>
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	2b21      	cmp	r3, #33	; 0x21
 8002cca:	d002      	beq.n	8002cd2 <I2C_ITSlaveCplt+0x32>
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b29      	cmp	r3, #41	; 0x29
 8002cd0:	d108      	bne.n	8002ce4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002cd2:	f248 0101 	movw	r1, #32769	; 0x8001
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fc56 	bl	8003588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2221      	movs	r2, #33	; 0x21
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce2:	e00d      	b.n	8002d00 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b22      	cmp	r3, #34	; 0x22
 8002ce8:	d002      	beq.n	8002cf0 <I2C_ITSlaveCplt+0x50>
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b2a      	cmp	r3, #42	; 0x2a
 8002cee:	d107      	bne.n	8002d00 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002cf0:	f248 0102 	movw	r1, #32770	; 0x8002
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fc47 	bl	8003588 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2222      	movs	r2, #34	; 0x22
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d0e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b64      	ldr	r3, [pc, #400]	; (8002eac <I2C_ITSlaveCplt+0x20c>)
 8002d1c:	400b      	ands	r3, r1
 8002d1e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fa14 	bl	800314e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	0b9b      	lsrs	r3, r3, #14
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d013      	beq.n	8002d5a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d40:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d020      	beq.n	8002d8c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d58:	e018      	b.n	8002d8c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	0bdb      	lsrs	r3, r3, #15
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d012      	beq.n	8002d8c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f023 0304 	bic.w	r3, r3, #4
 8002d9e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00c      	beq.n	8002dda <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	f043 0204 	orr.w	r2, r3, #4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f8a7 	bl	8002f60 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b28      	cmp	r3, #40	; 0x28
 8002e1c:	d141      	bne.n	8002ea2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e1e:	6979      	ldr	r1, [r7, #20]
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f847 	bl	8002eb4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e26:	e03c      	b.n	8002ea2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e30:	d014      	beq.n	8002e5c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff fed6 	bl	8002be4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <I2C_ITSlaveCplt+0x210>)
 8002e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff fc78 	bl	800274a <HAL_I2C_ListenCpltCallback>
}
 8002e5a:	e022      	b.n	8002ea2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b22      	cmp	r3, #34	; 0x22
 8002e66:	d10e      	bne.n	8002e86 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fc4b 	bl	800271a <HAL_I2C_SlaveRxCpltCallback>
}
 8002e84:	e00d      	b.n	8002ea2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff fc32 	bl	8002706 <HAL_I2C_SlaveTxCpltCallback>
}
 8002ea2:	bf00      	nop
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	fe00e800 	.word	0xfe00e800
 8002eb0:	ffff0000 	.word	0xffff0000

08002eb4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <I2C_ITListenCplt+0xa8>)
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d022      	beq.n	8002f32 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d012      	beq.n	8002f32 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	f043 0204 	orr.w	r2, r3, #4
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f32:	f248 0103 	movw	r1, #32771	; 0x8003
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fb26 	bl	8003588 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2210      	movs	r2, #16
 8002f42:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fbfc 	bl	800274a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	ffff0000 	.word	0xffff0000

08002f60 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a5d      	ldr	r2, [pc, #372]	; (80030f4 <I2C_ITError+0x194>)
 8002f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	2b28      	cmp	r3, #40	; 0x28
 8002f96:	d005      	beq.n	8002fa4 <I2C_ITError+0x44>
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2b29      	cmp	r3, #41	; 0x29
 8002f9c:	d002      	beq.n	8002fa4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8002fa2:	d10b      	bne.n	8002fbc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fa4:	2103      	movs	r1, #3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 faee 	bl	8003588 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2228      	movs	r2, #40	; 0x28
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a50      	ldr	r2, [pc, #320]	; (80030f8 <I2C_ITError+0x198>)
 8002fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002fba:	e011      	b.n	8002fe0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fbc:	f248 0103 	movw	r1, #32771	; 0x8003
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fae1 	bl	8003588 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b60      	cmp	r3, #96	; 0x60
 8002fd0:	d003      	beq.n	8002fda <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d039      	beq.n	8003062 <I2C_ITError+0x102>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b11      	cmp	r3, #17
 8002ff2:	d002      	beq.n	8002ffa <I2C_ITError+0x9a>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b21      	cmp	r3, #33	; 0x21
 8002ff8:	d133      	bne.n	8003062 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003008:	d107      	bne.n	800301a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003018:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe fe36 	bl	8001c90 <HAL_DMA_GetState>
 8003024:	4603      	mov	r3, r0
 8003026:	2b01      	cmp	r3, #1
 8003028:	d017      	beq.n	800305a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	4a33      	ldr	r2, [pc, #204]	; (80030fc <I2C_ITError+0x19c>)
 8003030:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fde5 	bl	8001c0e <HAL_DMA_Abort_IT>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d04d      	beq.n	80030e6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003054:	4610      	mov	r0, r2
 8003056:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003058:	e045      	b.n	80030e6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f850 	bl	8003100 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003060:	e041      	b.n	80030e6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d039      	beq.n	80030de <I2C_ITError+0x17e>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b12      	cmp	r3, #18
 800306e:	d002      	beq.n	8003076 <I2C_ITError+0x116>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b22      	cmp	r3, #34	; 0x22
 8003074:	d133      	bne.n	80030de <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003084:	d107      	bne.n	8003096 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003094:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe fdf8 	bl	8001c90 <HAL_DMA_GetState>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d017      	beq.n	80030d6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	4a14      	ldr	r2, [pc, #80]	; (80030fc <I2C_ITError+0x19c>)
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fda7 	bl	8001c0e <HAL_DMA_Abort_IT>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d011      	beq.n	80030ea <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030d0:	4610      	mov	r0, r2
 80030d2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030d4:	e009      	b.n	80030ea <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f812 	bl	8003100 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030dc:	e005      	b.n	80030ea <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f80e 	bl	8003100 <I2C_TreatErrorCallback>
  }
}
 80030e4:	e002      	b.n	80030ec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030ea:	bf00      	nop
}
 80030ec:	bf00      	nop
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	ffff0000 	.word	0xffff0000
 80030f8:	08002787 	.word	0x08002787
 80030fc:	08003197 	.word	0x08003197

08003100 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b60      	cmp	r3, #96	; 0x60
 8003112:	d10e      	bne.n	8003132 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff fb21 	bl	8002772 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003130:	e009      	b.n	8003146 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff fb0c 	bl	800275e <HAL_I2C_ErrorCallback>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	d103      	bne.n	800316c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2200      	movs	r2, #0
 800316a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d007      	beq.n	800318a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	619a      	str	r2, [r3, #24]
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	2200      	movs	r2, #0
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	2200      	movs	r2, #0
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff ff9b 	bl	8003100 <I2C_TreatErrorCallback>
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e2:	e022      	b.n	800322a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d01e      	beq.n	800322a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ec:	f7fe fbc0 	bl	8001970 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d302      	bcc.n	8003202 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d113      	bne.n	800322a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f043 0220 	orr.w	r2, r3, #32
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e00f      	b.n	800324a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699a      	ldr	r2, [r3, #24]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	429a      	cmp	r2, r3
 8003238:	bf0c      	ite	eq
 800323a:	2301      	moveq	r3, #1
 800323c:	2300      	movne	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	429a      	cmp	r2, r3
 8003246:	d0cd      	beq.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800325e:	e02c      	b.n	80032ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f871 	bl	800334c <I2C_IsErrorOccurred>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e02a      	b.n	80032ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d01e      	beq.n	80032ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327c:	f7fe fb78 	bl	8001970 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	429a      	cmp	r2, r3
 800328a:	d302      	bcc.n	8003292 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d113      	bne.n	80032ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f043 0220 	orr.w	r2, r3, #32
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e007      	b.n	80032ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d1cb      	bne.n	8003260 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032de:	e028      	b.n	8003332 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f831 	bl	800334c <I2C_IsErrorOccurred>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e026      	b.n	8003342 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f4:	f7fe fb3c 	bl	8001970 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	429a      	cmp	r2, r3
 8003302:	d302      	bcc.n	800330a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d113      	bne.n	8003332 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f043 0220 	orr.w	r2, r3, #32
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e007      	b.n	8003342 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b20      	cmp	r3, #32
 800333e:	d1cf      	bne.n	80032e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	d075      	beq.n	8003464 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2210      	movs	r2, #16
 800337e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003380:	e056      	b.n	8003430 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d052      	beq.n	8003430 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fe faf1 	bl	8001970 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <I2C_IsErrorOccurred+0x54>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d147      	bne.n	8003430 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c2:	d12e      	bne.n	8003422 <I2C_IsErrorOccurred+0xd6>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ca:	d02a      	beq.n	8003422 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d027      	beq.n	8003422 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033e2:	f7fe fac5 	bl	8001970 <HAL_GetTick>
 80033e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e8:	e01b      	b.n	8003422 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033ea:	f7fe fac1 	bl	8001970 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b19      	cmp	r3, #25
 80033f6:	d914      	bls.n	8003422 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b20      	cmp	r3, #32
 800342e:	d1dc      	bne.n	80033ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b20      	cmp	r3, #32
 800343c:	d003      	beq.n	8003446 <I2C_IsErrorOccurred+0xfa>
 800343e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003442:	2b00      	cmp	r3, #0
 8003444:	d09d      	beq.n	8003382 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800344a:	2b00      	cmp	r3, #0
 800344c:	d103      	bne.n	8003456 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2220      	movs	r2, #32
 8003454:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003486:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f043 0308 	orr.w	r3, r3, #8
 800349e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80034d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01c      	beq.n	8003514 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff fe37 	bl	800314e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <I2C_IsErrorOccurred+0x1d4>)
 80034ec:	400b      	ands	r3, r1
 80034ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003518:	4618      	mov	r0, r3
 800351a:	3728      	adds	r7, #40	; 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	fe00e800 	.word	0xfe00e800

08003524 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	817b      	strh	r3, [r7, #10]
 8003532:	4613      	mov	r3, r2
 8003534:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800353c:	7a7b      	ldrb	r3, [r7, #9]
 800353e:	041b      	lsls	r3, r3, #16
 8003540:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003544:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	4313      	orrs	r3, r2
 800354e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003552:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	0d5b      	lsrs	r3, r3, #21
 800355e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <I2C_TransferConfig+0x60>)
 8003564:	430b      	orrs	r3, r1
 8003566:	43db      	mvns	r3, r3
 8003568:	ea02 0103 	and.w	r1, r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	03ff63ff 	.word	0x03ff63ff

08003588 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00f      	beq.n	80035c2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80035a8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035b6:	2b28      	cmp	r3, #40	; 0x28
 80035b8:	d003      	beq.n	80035c2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80035c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80035c2:	887b      	ldrh	r3, [r7, #2]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00f      	beq.n	80035ec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80035d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035e0:	2b28      	cmp	r3, #40	; 0x28
 80035e2:	d003      	beq.n	80035ec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80035ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80035ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da03      	bge.n	80035fc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80035fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d103      	bne.n	800360a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003608:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	2b20      	cmp	r3, #32
 800360e:	d103      	bne.n	8003618 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f043 0320 	orr.w	r3, r3, #32
 8003616:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003618:	887b      	ldrh	r3, [r7, #2]
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d103      	bne.n	8003626 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003624:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6819      	ldr	r1, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	43da      	mvns	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	400a      	ands	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b20      	cmp	r3, #32
 8003658:	d138      	bne.n	80036cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003664:	2302      	movs	r3, #2
 8003666:	e032      	b.n	80036ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	; 0x24
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003696:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d139      	bne.n	8003764 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e033      	b.n	8003766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2224      	movs	r2, #36	; 0x24
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800372c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <HAL_PWREx_GetVoltageRange+0x18>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40007000 	.word	0x40007000

08003790 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379e:	d130      	bne.n	8003802 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037a0:	4b23      	ldr	r3, [pc, #140]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ac:	d038      	beq.n	8003820 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037be:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2232      	movs	r2, #50	; 0x32
 80037c4:	fb02 f303 	mul.w	r3, r2, r3
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0c9b      	lsrs	r3, r3, #18
 80037d0:	3301      	adds	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037d4:	e002      	b.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d102      	bne.n	80037f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f2      	bne.n	80037d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fc:	d110      	bne.n	8003820 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e00f      	b.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	d007      	beq.n	8003820 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003818:	4a05      	ldr	r2, [pc, #20]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800381e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40007000 	.word	0x40007000
 8003834:	20000000 	.word	0x20000000
 8003838:	431bde83 	.word	0x431bde83

0800383c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e3ca      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800384e:	4b97      	ldr	r3, [pc, #604]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003858:	4b94      	ldr	r3, [pc, #592]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80e4 	beq.w	8003a38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <HAL_RCC_OscConfig+0x4a>
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b0c      	cmp	r3, #12
 800387a:	f040 808b 	bne.w	8003994 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b01      	cmp	r3, #1
 8003882:	f040 8087 	bne.w	8003994 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003886:	4b89      	ldr	r3, [pc, #548]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_RCC_OscConfig+0x62>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e3a2      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1a      	ldr	r2, [r3, #32]
 80038a2:	4b82      	ldr	r3, [pc, #520]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <HAL_RCC_OscConfig+0x7c>
 80038ae:	4b7f      	ldr	r3, [pc, #508]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b6:	e005      	b.n	80038c4 <HAL_RCC_OscConfig+0x88>
 80038b8:	4b7c      	ldr	r3, [pc, #496]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d223      	bcs.n	8003910 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fd55 	bl	800437c <RCC_SetFlashLatencyFromMSIRange>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e383      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038dc:	4b73      	ldr	r3, [pc, #460]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a72      	ldr	r2, [pc, #456]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038e2:	f043 0308 	orr.w	r3, r3, #8
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b70      	ldr	r3, [pc, #448]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	496d      	ldr	r1, [pc, #436]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038fa:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	4968      	ldr	r1, [pc, #416]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
 800390e:	e025      	b.n	800395c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003910:	4b66      	ldr	r3, [pc, #408]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a65      	ldr	r2, [pc, #404]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003916:	f043 0308 	orr.w	r3, r3, #8
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b63      	ldr	r3, [pc, #396]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4960      	ldr	r1, [pc, #384]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800392e:	4b5f      	ldr	r3, [pc, #380]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	495b      	ldr	r1, [pc, #364]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fd15 	bl	800437c <RCC_SetFlashLatencyFromMSIRange>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e343      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800395c:	f000 fc4a 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b52      	ldr	r3, [pc, #328]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	4950      	ldr	r1, [pc, #320]	; (8003ab0 <HAL_RCC_OscConfig+0x274>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	4a4e      	ldr	r2, [pc, #312]	; (8003ab4 <HAL_RCC_OscConfig+0x278>)
 800397a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800397c:	4b4e      	ldr	r3, [pc, #312]	; (8003ab8 <HAL_RCC_OscConfig+0x27c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fd ffa5 	bl	80018d0 <HAL_InitTick>
 8003986:	4603      	mov	r3, r0
 8003988:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d052      	beq.n	8003a36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	e327      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d032      	beq.n	8003a02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800399c:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a42      	ldr	r2, [pc, #264]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039a8:	f7fd ffe2 	bl	8001970 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039b0:	f7fd ffde 	bl	8001970 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e310      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039c2:	4b3a      	ldr	r3, [pc, #232]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ce:	4b37      	ldr	r3, [pc, #220]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a36      	ldr	r2, [pc, #216]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039d4:	f043 0308 	orr.w	r3, r3, #8
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b34      	ldr	r3, [pc, #208]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4931      	ldr	r1, [pc, #196]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ec:	4b2f      	ldr	r3, [pc, #188]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	492c      	ldr	r1, [pc, #176]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	e01a      	b.n	8003a38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a29      	ldr	r2, [pc, #164]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a0e:	f7fd ffaf 	bl	8001970 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a16:	f7fd ffab 	bl	8001970 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e2dd      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a28:	4b20      	ldr	r3, [pc, #128]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f0      	bne.n	8003a16 <HAL_RCC_OscConfig+0x1da>
 8003a34:	e000      	b.n	8003a38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d074      	beq.n	8003b2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d005      	beq.n	8003a56 <HAL_RCC_OscConfig+0x21a>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	d10e      	bne.n	8003a6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d10b      	bne.n	8003a6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d064      	beq.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d160      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e2ba      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a76:	d106      	bne.n	8003a86 <HAL_RCC_OscConfig+0x24a>
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e026      	b.n	8003ad4 <HAL_RCC_OscConfig+0x298>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8e:	d115      	bne.n	8003abc <HAL_RCC_OscConfig+0x280>
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a05      	ldr	r2, [pc, #20]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a02      	ldr	r2, [pc, #8]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	e014      	b.n	8003ad4 <HAL_RCC_OscConfig+0x298>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	080075c4 	.word	0x080075c4
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	20000004 	.word	0x20000004
 8003abc:	4ba0      	ldr	r3, [pc, #640]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a9f      	ldr	r2, [pc, #636]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b9d      	ldr	r3, [pc, #628]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a9c      	ldr	r2, [pc, #624]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d013      	beq.n	8003b04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd ff48 	bl	8001970 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fd ff44 	bl	8001970 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e276      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003af6:	4b92      	ldr	r3, [pc, #584]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x2a8>
 8003b02:	e014      	b.n	8003b2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd ff34 	bl	8001970 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fd ff30 	bl	8001970 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e262      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b1e:	4b88      	ldr	r3, [pc, #544]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2d0>
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d060      	beq.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_OscConfig+0x310>
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b0c      	cmp	r3, #12
 8003b44:	d119      	bne.n	8003b7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d116      	bne.n	8003b7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b4c:	4b7c      	ldr	r3, [pc, #496]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_RCC_OscConfig+0x328>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e23f      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b64:	4b76      	ldr	r3, [pc, #472]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	4973      	ldr	r1, [pc, #460]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b78:	e040      	b.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d023      	beq.n	8003bca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b82:	4b6f      	ldr	r3, [pc, #444]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6e      	ldr	r2, [pc, #440]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8e:	f7fd feef 	bl	8001970 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b96:	f7fd feeb 	bl	8001970 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e21d      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba8:	4b65      	ldr	r3, [pc, #404]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb4:	4b62      	ldr	r3, [pc, #392]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	495f      	ldr	r1, [pc, #380]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
 8003bc8:	e018      	b.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bca:	4b5d      	ldr	r3, [pc, #372]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a5c      	ldr	r2, [pc, #368]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7fd fecb 	bl	8001970 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bde:	f7fd fec7 	bl	8001970 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e1f9      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f0      	bne.n	8003bde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d03c      	beq.n	8003c82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01c      	beq.n	8003c4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c10:	4b4b      	ldr	r3, [pc, #300]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c16:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fd fea6 	bl	8001970 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c28:	f7fd fea2 	bl	8001970 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1d4      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c3a:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0ef      	beq.n	8003c28 <HAL_RCC_OscConfig+0x3ec>
 8003c48:	e01b      	b.n	8003c82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c50:	4a3b      	ldr	r2, [pc, #236]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5a:	f7fd fe89 	bl	8001970 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fd fe85 	bl	8001970 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e1b7      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c74:	4b32      	ldr	r3, [pc, #200]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ef      	bne.n	8003c62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80a6 	beq.w	8003ddc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c90:	2300      	movs	r3, #0
 8003c92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c94:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10d      	bne.n	8003cbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	4a26      	ldr	r2, [pc, #152]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6593      	str	r3, [r2, #88]	; 0x58
 8003cac:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cbc:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <HAL_RCC_OscConfig+0x508>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d118      	bne.n	8003cfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <HAL_RCC_OscConfig+0x508>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <HAL_RCC_OscConfig+0x508>)
 8003cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd4:	f7fd fe4c 	bl	8001970 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fd fe48 	bl	8001970 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e17a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_RCC_OscConfig+0x508>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d108      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4d8>
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d12:	e029      	b.n	8003d68 <HAL_RCC_OscConfig+0x52c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	d115      	bne.n	8003d48 <HAL_RCC_OscConfig+0x50c>
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	4a03      	ldr	r2, [pc, #12]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d3c:	e014      	b.n	8003d68 <HAL_RCC_OscConfig+0x52c>
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40007000 	.word	0x40007000
 8003d48:	4b9c      	ldr	r3, [pc, #624]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	4a9b      	ldr	r2, [pc, #620]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d58:	4b98      	ldr	r3, [pc, #608]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5e:	4a97      	ldr	r2, [pc, #604]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d016      	beq.n	8003d9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd fdfe 	bl	8001970 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd fdfa 	bl	8001970 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e12a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d8e:	4b8b      	ldr	r3, [pc, #556]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ed      	beq.n	8003d78 <HAL_RCC_OscConfig+0x53c>
 8003d9c:	e015      	b.n	8003dca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9e:	f7fd fde7 	bl	8001970 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fd fde3 	bl	8001970 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e113      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dbc:	4b7f      	ldr	r3, [pc, #508]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1ed      	bne.n	8003da6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dca:	7ffb      	ldrb	r3, [r7, #31]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd0:	4b7a      	ldr	r3, [pc, #488]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	4a79      	ldr	r2, [pc, #484]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80fe 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	f040 80d0 	bne.w	8003f90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003df0:	4b72      	ldr	r3, [pc, #456]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f003 0203 	and.w	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d130      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d127      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d11f      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e30:	2a07      	cmp	r2, #7
 8003e32:	bf14      	ite	ne
 8003e34:	2201      	movne	r2, #1
 8003e36:	2200      	moveq	r2, #0
 8003e38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d113      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d109      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d06e      	beq.n	8003f44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	d069      	beq.n	8003f40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e6c:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e78:	4b50      	ldr	r3, [pc, #320]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0ad      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e88:	4b4c      	ldr	r3, [pc, #304]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a4b      	ldr	r2, [pc, #300]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e94:	f7fd fd6c 	bl	8001970 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fd fd68 	bl	8001970 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e09a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eae:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eba:	4b40      	ldr	r3, [pc, #256]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	4b40      	ldr	r3, [pc, #256]	; (8003fc0 <HAL_RCC_OscConfig+0x784>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003eca:	3a01      	subs	r2, #1
 8003ecc:	0112      	lsls	r2, r2, #4
 8003ece:	4311      	orrs	r1, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ed4:	0212      	lsls	r2, r2, #8
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003edc:	0852      	lsrs	r2, r2, #1
 8003ede:	3a01      	subs	r2, #1
 8003ee0:	0552      	lsls	r2, r2, #21
 8003ee2:	4311      	orrs	r1, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ee8:	0852      	lsrs	r2, r2, #1
 8003eea:	3a01      	subs	r2, #1
 8003eec:	0652      	lsls	r2, r2, #25
 8003eee:	4311      	orrs	r1, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ef4:	0912      	lsrs	r2, r2, #4
 8003ef6:	0452      	lsls	r2, r2, #17
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	4930      	ldr	r1, [pc, #192]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f00:	4b2e      	ldr	r3, [pc, #184]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2d      	ldr	r2, [pc, #180]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f18:	f7fd fd2a 	bl	8001970 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fd fd26 	bl	8001970 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e058      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f32:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f3e:	e050      	b.n	8003fe2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e04f      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d148      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4a16      	ldr	r2, [pc, #88]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f68:	f7fd fd02 	bl	8001970 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fd fcfe 	bl	8001970 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e030      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x734>
 8003f8e:	e028      	b.n	8003fe2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b0c      	cmp	r3, #12
 8003f94:	d023      	beq.n	8003fde <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7fd fce5 	bl	8001970 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa8:	e00c      	b.n	8003fc4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fd fce1 	bl	8001970 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d905      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e013      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCC_OscConfig+0x7b0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ec      	bne.n	8003faa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_RCC_OscConfig+0x7b0>)
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	4905      	ldr	r1, [pc, #20]	; (8003fec <HAL_RCC_OscConfig+0x7b0>)
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCC_OscConfig+0x7b4>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60cb      	str	r3, [r1, #12]
 8003fdc:	e001      	b.n	8003fe2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	feeefffc 	.word	0xfeeefffc

08003ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0e7      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004008:	4b75      	ldr	r3, [pc, #468]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d910      	bls.n	8004038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b72      	ldr	r3, [pc, #456]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 0207 	bic.w	r2, r3, #7
 800401e:	4970      	ldr	r1, [pc, #448]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b6e      	ldr	r3, [pc, #440]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0cf      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d010      	beq.n	8004066 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	4b66      	ldr	r3, [pc, #408]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004050:	429a      	cmp	r2, r3
 8004052:	d908      	bls.n	8004066 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004054:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4960      	ldr	r1, [pc, #384]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d04c      	beq.n	800410c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b03      	cmp	r3, #3
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800407a:	4b5a      	ldr	r3, [pc, #360]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d121      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0a6      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004092:	4b54      	ldr	r3, [pc, #336]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d115      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e09a      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040aa:	4b4e      	ldr	r3, [pc, #312]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e08e      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ba:	4b4a      	ldr	r3, [pc, #296]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e086      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b46      	ldr	r3, [pc, #280]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4943      	ldr	r1, [pc, #268]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040dc:	f7fd fc48 	bl	8001970 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7fd fc44 	bl	8001970 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e06e      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b3a      	ldr	r3, [pc, #232]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d010      	beq.n	800413a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004124:	429a      	cmp	r2, r3
 8004126:	d208      	bcs.n	800413a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004128:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	492b      	ldr	r1, [pc, #172]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800413a:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d210      	bcs.n	800416a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004148:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 0207 	bic.w	r2, r3, #7
 8004150:	4923      	ldr	r1, [pc, #140]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004158:	4b21      	ldr	r3, [pc, #132]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d001      	beq.n	800416a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e036      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004176:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	4918      	ldr	r1, [pc, #96]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004184:	4313      	orrs	r3, r2
 8004186:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4910      	ldr	r1, [pc, #64]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041a8:	f000 f824 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	490b      	ldr	r1, [pc, #44]	; (80041e8 <HAL_RCC_ClockConfig+0x1f4>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	4a09      	ldr	r2, [pc, #36]	; (80041ec <HAL_RCC_ClockConfig+0x1f8>)
 80041c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041c8:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_RCC_ClockConfig+0x1fc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fd fb7f 	bl	80018d0 <HAL_InitTick>
 80041d2:	4603      	mov	r3, r0
 80041d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80041d6:	7afb      	ldrb	r3, [r7, #11]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40022000 	.word	0x40022000
 80041e4:	40021000 	.word	0x40021000
 80041e8:	080075c4 	.word	0x080075c4
 80041ec:	20000000 	.word	0x20000000
 80041f0:	20000004 	.word	0x20000004

080041f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	; 0x24
 80041f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004202:	4b3e      	ldr	r3, [pc, #248]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800420c:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x34>
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d121      	bne.n	8004266 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d11e      	bne.n	8004266 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004228:	4b34      	ldr	r3, [pc, #208]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004234:	4b31      	ldr	r3, [pc, #196]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	e005      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004244:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004250:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004258:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10d      	bne.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004264:	e00a      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d102      	bne.n	8004272 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <HAL_RCC_GetSysClockFreq+0x110>)
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	e004      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d101      	bne.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004278:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCC_GetSysClockFreq+0x114>)
 800427a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d134      	bne.n	80042ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004282:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d003      	beq.n	800429a <HAL_RCC_GetSysClockFreq+0xa6>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d003      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0xac>
 8004298:	e005      	b.n	80042a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800429a:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <HAL_RCC_GetSysClockFreq+0x110>)
 800429c:	617b      	str	r3, [r7, #20]
      break;
 800429e:	e005      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCC_GetSysClockFreq+0x114>)
 80042a2:	617b      	str	r3, [r7, #20]
      break;
 80042a4:	e002      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	617b      	str	r3, [r7, #20]
      break;
 80042aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	3301      	adds	r3, #1
 80042b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	fb03 f202 	mul.w	r2, r3, r2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	0e5b      	lsrs	r3, r3, #25
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	3301      	adds	r3, #1
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042ec:	69bb      	ldr	r3, [r7, #24]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3724      	adds	r7, #36	; 0x24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
 8004300:	080075dc 	.word	0x080075dc
 8004304:	00f42400 	.word	0x00f42400
 8004308:	007a1200 	.word	0x007a1200

0800430c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_RCC_GetHCLKFreq+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000000 	.word	0x20000000

08004324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004328:	f7ff fff0 	bl	800430c <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4904      	ldr	r1, [pc, #16]	; (800434c <HAL_RCC_GetPCLK1Freq+0x28>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	080075d4 	.word	0x080075d4

08004350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004354:	f7ff ffda 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0adb      	lsrs	r3, r3, #11
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4904      	ldr	r1, [pc, #16]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40021000 	.word	0x40021000
 8004378:	080075d4 	.word	0x080075d4

0800437c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004388:	4b2a      	ldr	r3, [pc, #168]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004394:	f7ff f9ee 	bl	8003774 <HAL_PWREx_GetVoltageRange>
 8004398:	6178      	str	r0, [r7, #20]
 800439a:	e014      	b.n	80043c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	4a24      	ldr	r2, [pc, #144]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a6:	6593      	str	r3, [r2, #88]	; 0x58
 80043a8:	4b22      	ldr	r3, [pc, #136]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043b4:	f7ff f9de 	bl	8003774 <HAL_PWREx_GetVoltageRange>
 80043b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043cc:	d10b      	bne.n	80043e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b80      	cmp	r3, #128	; 0x80
 80043d2:	d919      	bls.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2ba0      	cmp	r3, #160	; 0xa0
 80043d8:	d902      	bls.n	80043e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043da:	2302      	movs	r3, #2
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e013      	b.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043e0:	2301      	movs	r3, #1
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	e010      	b.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b80      	cmp	r3, #128	; 0x80
 80043ea:	d902      	bls.n	80043f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043ec:	2303      	movs	r3, #3
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	e00a      	b.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b80      	cmp	r3, #128	; 0x80
 80043f6:	d102      	bne.n	80043fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043f8:	2302      	movs	r3, #2
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	e004      	b.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b70      	cmp	r3, #112	; 0x70
 8004402:	d101      	bne.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004404:	2301      	movs	r3, #1
 8004406:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f023 0207 	bic.w	r2, r3, #7
 8004410:	4909      	ldr	r1, [pc, #36]	; (8004438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004418:	4b07      	ldr	r3, [pc, #28]	; (8004438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	429a      	cmp	r2, r3
 8004424:	d001      	beq.n	800442a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	40022000 	.word	0x40022000

0800443c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004444:	2300      	movs	r3, #0
 8004446:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004448:	2300      	movs	r3, #0
 800444a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004454:	2b00      	cmp	r3, #0
 8004456:	d041      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800445c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004460:	d02a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004462:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004466:	d824      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004468:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800446c:	d008      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800446e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004472:	d81e      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800447c:	d010      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800447e:	e018      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004480:	4b86      	ldr	r3, [pc, #536]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a85      	ldr	r2, [pc, #532]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800448c:	e015      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3304      	adds	r3, #4
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fabb 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800449e:	e00c      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3320      	adds	r3, #32
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fba6 	bl	8004bf8 <RCCEx_PLLSAI2_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044b0:	e003      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	74fb      	strb	r3, [r7, #19]
      break;
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ba:	7cfb      	ldrb	r3, [r7, #19]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044c0:	4b76      	ldr	r3, [pc, #472]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ce:	4973      	ldr	r1, [pc, #460]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044d6:	e001      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d8:	7cfb      	ldrb	r3, [r7, #19]
 80044da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d041      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044f0:	d02a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044f6:	d824      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044fc:	d008      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004502:	d81e      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800450c:	d010      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800450e:	e018      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004510:	4b62      	ldr	r3, [pc, #392]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4a61      	ldr	r2, [pc, #388]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800451c:	e015      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fa73 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800452e:	e00c      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3320      	adds	r3, #32
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fb5e 	bl	8004bf8 <RCCEx_PLLSAI2_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004540:	e003      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	74fb      	strb	r3, [r7, #19]
      break;
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004550:	4b52      	ldr	r3, [pc, #328]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800455e:	494f      	ldr	r1, [pc, #316]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004566:	e001      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004568:	7cfb      	ldrb	r3, [r7, #19]
 800456a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80a0 	beq.w	80046ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800457e:	4b47      	ldr	r3, [pc, #284]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004594:	4b41      	ldr	r3, [pc, #260]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	4a40      	ldr	r2, [pc, #256]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459e:	6593      	str	r3, [r2, #88]	; 0x58
 80045a0:	4b3e      	ldr	r3, [pc, #248]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ac:	2301      	movs	r3, #1
 80045ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b0:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a3a      	ldr	r2, [pc, #232]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045bc:	f7fd f9d8 	bl	8001970 <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045c2:	e009      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c4:	f7fd f9d4 	bl	8001970 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d902      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	74fb      	strb	r3, [r7, #19]
        break;
 80045d6:	e005      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045d8:	4b31      	ldr	r3, [pc, #196]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ef      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d15c      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045ea:	4b2c      	ldr	r3, [pc, #176]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01f      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	429a      	cmp	r2, r3
 8004606:	d019      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004608:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004612:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	4a20      	ldr	r2, [pc, #128]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004624:	4b1d      	ldr	r3, [pc, #116]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	4a1c      	ldr	r2, [pc, #112]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004634:	4a19      	ldr	r2, [pc, #100]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd f993 	bl	8001970 <HAL_GetTick>
 800464a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464c:	e00b      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fd f98f 	bl	8001970 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d902      	bls.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	74fb      	strb	r3, [r7, #19]
            break;
 8004664:	e006      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ec      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10c      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800467a:	4b08      	ldr	r3, [pc, #32]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468a:	4904      	ldr	r1, [pc, #16]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004692:	e009      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	74bb      	strb	r3, [r7, #18]
 8004698:	e006      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a8:	7c7b      	ldrb	r3, [r7, #17]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d105      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ae:	4b9e      	ldr	r3, [pc, #632]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	4a9d      	ldr	r2, [pc, #628]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046c6:	4b98      	ldr	r3, [pc, #608]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f023 0203 	bic.w	r2, r3, #3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	4994      	ldr	r1, [pc, #592]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046e8:	4b8f      	ldr	r3, [pc, #572]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f023 020c 	bic.w	r2, r3, #12
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	498c      	ldr	r1, [pc, #560]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800470a:	4b87      	ldr	r3, [pc, #540]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004710:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	4983      	ldr	r1, [pc, #524]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800472c:	4b7e      	ldr	r3, [pc, #504]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004732:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	497b      	ldr	r1, [pc, #492]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800474e:	4b76      	ldr	r3, [pc, #472]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475c:	4972      	ldr	r1, [pc, #456]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004770:	4b6d      	ldr	r3, [pc, #436]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477e:	496a      	ldr	r1, [pc, #424]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004792:	4b65      	ldr	r3, [pc, #404]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a0:	4961      	ldr	r1, [pc, #388]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047b4:	4b5c      	ldr	r3, [pc, #368]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c2:	4959      	ldr	r1, [pc, #356]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d6:	4b54      	ldr	r3, [pc, #336]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e4:	4950      	ldr	r1, [pc, #320]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047f8:	4b4b      	ldr	r3, [pc, #300]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	4948      	ldr	r1, [pc, #288]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800481a:	4b43      	ldr	r3, [pc, #268]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004828:	493f      	ldr	r1, [pc, #252]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d028      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800483c:	4b3a      	ldr	r3, [pc, #232]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004842:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800484a:	4937      	ldr	r1, [pc, #220]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004856:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800485a:	d106      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800485c:	4b32      	ldr	r3, [pc, #200]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a31      	ldr	r2, [pc, #196]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004866:	60d3      	str	r3, [r2, #12]
 8004868:	e011      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004872:	d10c      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	2101      	movs	r1, #1
 800487a:	4618      	mov	r0, r3
 800487c:	f000 f8c8 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800488a:	7cfb      	ldrb	r3, [r7, #19]
 800488c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d028      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800489a:	4b23      	ldr	r3, [pc, #140]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a8:	491f      	ldr	r1, [pc, #124]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b8:	d106      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ba:	4b1b      	ldr	r3, [pc, #108]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	4a1a      	ldr	r2, [pc, #104]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048c4:	60d3      	str	r3, [r2, #12]
 80048c6:	e011      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048d0:	d10c      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	2101      	movs	r1, #1
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f899 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02b      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004906:	4908      	ldr	r1, [pc, #32]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004916:	d109      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4a02      	ldr	r2, [pc, #8]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004922:	60d3      	str	r3, [r2, #12]
 8004924:	e014      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004934:	d10c      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3304      	adds	r3, #4
 800493a:	2101      	movs	r1, #1
 800493c:	4618      	mov	r0, r3
 800493e:	f000 f867 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004946:	7cfb      	ldrb	r3, [r7, #19]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02f      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800495c:	4b2b      	ldr	r3, [pc, #172]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800496a:	4928      	ldr	r1, [pc, #160]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800497a:	d10d      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	2102      	movs	r1, #2
 8004982:	4618      	mov	r0, r3
 8004984:	f000 f844 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d014      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	74bb      	strb	r3, [r7, #18]
 8004996:	e011      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800499c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a0:	d10c      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3320      	adds	r3, #32
 80049a6:	2102      	movs	r1, #2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 f925 	bl	8004bf8 <RCCEx_PLLSAI2_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049d6:	490d      	ldr	r1, [pc, #52]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00b      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049ea:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049fa:	4904      	ldr	r1, [pc, #16]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a02:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000

08004a10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a1e:	4b75      	ldr	r3, [pc, #468]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d018      	beq.n	8004a5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a2a:	4b72      	ldr	r3, [pc, #456]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0203 	and.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d10d      	bne.n	8004a56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a42:	4b6c      	ldr	r3, [pc, #432]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
       ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d047      	beq.n	8004ae6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
 8004a5a:	e044      	b.n	8004ae6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d018      	beq.n	8004a96 <RCCEx_PLLSAI1_Config+0x86>
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d825      	bhi.n	8004ab4 <RCCEx_PLLSAI1_Config+0xa4>
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d002      	beq.n	8004a72 <RCCEx_PLLSAI1_Config+0x62>
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d009      	beq.n	8004a84 <RCCEx_PLLSAI1_Config+0x74>
 8004a70:	e020      	b.n	8004ab4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a72:	4b60      	ldr	r3, [pc, #384]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d11d      	bne.n	8004aba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a82:	e01a      	b.n	8004aba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a84:	4b5b      	ldr	r3, [pc, #364]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d116      	bne.n	8004abe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a94:	e013      	b.n	8004abe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a96:	4b57      	ldr	r3, [pc, #348]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aa2:	4b54      	ldr	r3, [pc, #336]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ab2:	e006      	b.n	8004ac2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab8:	e004      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aba:	bf00      	nop
 8004abc:	e002      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ac2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10d      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004aca:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6819      	ldr	r1, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	4944      	ldr	r1, [pc, #272]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d17d      	bne.n	8004be8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004aec:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a40      	ldr	r2, [pc, #256]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af8:	f7fc ff3a 	bl	8001970 <HAL_GetTick>
 8004afc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004afe:	e009      	b.n	8004b14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b00:	f7fc ff36 	bl	8001970 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d902      	bls.n	8004b14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	73fb      	strb	r3, [r7, #15]
        break;
 8004b12:	e005      	b.n	8004b20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b14:	4b37      	ldr	r3, [pc, #220]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1ef      	bne.n	8004b00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d160      	bne.n	8004be8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d111      	bne.n	8004b50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b2c:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6892      	ldr	r2, [r2, #8]
 8004b3c:	0211      	lsls	r1, r2, #8
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68d2      	ldr	r2, [r2, #12]
 8004b42:	0912      	lsrs	r2, r2, #4
 8004b44:	0452      	lsls	r2, r2, #17
 8004b46:	430a      	orrs	r2, r1
 8004b48:	492a      	ldr	r1, [pc, #168]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	610b      	str	r3, [r1, #16]
 8004b4e:	e027      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d112      	bne.n	8004b7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b56:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6892      	ldr	r2, [r2, #8]
 8004b66:	0211      	lsls	r1, r2, #8
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6912      	ldr	r2, [r2, #16]
 8004b6c:	0852      	lsrs	r2, r2, #1
 8004b6e:	3a01      	subs	r2, #1
 8004b70:	0552      	lsls	r2, r2, #21
 8004b72:	430a      	orrs	r2, r1
 8004b74:	491f      	ldr	r1, [pc, #124]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	610b      	str	r3, [r1, #16]
 8004b7a:	e011      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b7c:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6892      	ldr	r2, [r2, #8]
 8004b8c:	0211      	lsls	r1, r2, #8
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6952      	ldr	r2, [r2, #20]
 8004b92:	0852      	lsrs	r2, r2, #1
 8004b94:	3a01      	subs	r2, #1
 8004b96:	0652      	lsls	r2, r2, #25
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	4916      	ldr	r1, [pc, #88]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ba0:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004baa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fc fee0 	bl	8001970 <HAL_GetTick>
 8004bb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bb2:	e009      	b.n	8004bc8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bb4:	f7fc fedc 	bl	8001970 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d902      	bls.n	8004bc8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	73fb      	strb	r3, [r7, #15]
          break;
 8004bc6:	e005      	b.n	8004bd4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ef      	beq.n	8004bb4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	4904      	ldr	r1, [pc, #16]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000

08004bf8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c06:	4b6a      	ldr	r3, [pc, #424]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d018      	beq.n	8004c44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c12:	4b67      	ldr	r3, [pc, #412]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0203 	and.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d10d      	bne.n	8004c3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
       ||
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c2a:	4b61      	ldr	r3, [pc, #388]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	091b      	lsrs	r3, r3, #4
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
       ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d047      	beq.n	8004cce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
 8004c42:	e044      	b.n	8004cce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d018      	beq.n	8004c7e <RCCEx_PLLSAI2_Config+0x86>
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d825      	bhi.n	8004c9c <RCCEx_PLLSAI2_Config+0xa4>
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d002      	beq.n	8004c5a <RCCEx_PLLSAI2_Config+0x62>
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d009      	beq.n	8004c6c <RCCEx_PLLSAI2_Config+0x74>
 8004c58:	e020      	b.n	8004c9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c5a:	4b55      	ldr	r3, [pc, #340]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d11d      	bne.n	8004ca2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c6a:	e01a      	b.n	8004ca2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c6c:	4b50      	ldr	r3, [pc, #320]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d116      	bne.n	8004ca6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c7c:	e013      	b.n	8004ca6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c7e:	4b4c      	ldr	r3, [pc, #304]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10f      	bne.n	8004caa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c8a:	4b49      	ldr	r3, [pc, #292]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c9a:	e006      	b.n	8004caa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca0:	e004      	b.n	8004cac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e002      	b.n	8004cac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004caa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cb2:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6819      	ldr	r1, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	4939      	ldr	r1, [pc, #228]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d167      	bne.n	8004da4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004cd4:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a35      	ldr	r2, [pc, #212]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce0:	f7fc fe46 	bl	8001970 <HAL_GetTick>
 8004ce4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ce6:	e009      	b.n	8004cfc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ce8:	f7fc fe42 	bl	8001970 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d902      	bls.n	8004cfc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	73fb      	strb	r3, [r7, #15]
        break;
 8004cfa:	e005      	b.n	8004d08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cfc:	4b2c      	ldr	r3, [pc, #176]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1ef      	bne.n	8004ce8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d14a      	bne.n	8004da4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d111      	bne.n	8004d38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d14:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6892      	ldr	r2, [r2, #8]
 8004d24:	0211      	lsls	r1, r2, #8
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68d2      	ldr	r2, [r2, #12]
 8004d2a:	0912      	lsrs	r2, r2, #4
 8004d2c:	0452      	lsls	r2, r2, #17
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	491f      	ldr	r1, [pc, #124]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	614b      	str	r3, [r1, #20]
 8004d36:	e011      	b.n	8004d5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d38:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6892      	ldr	r2, [r2, #8]
 8004d48:	0211      	lsls	r1, r2, #8
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6912      	ldr	r2, [r2, #16]
 8004d4e:	0852      	lsrs	r2, r2, #1
 8004d50:	3a01      	subs	r2, #1
 8004d52:	0652      	lsls	r2, r2, #25
 8004d54:	430a      	orrs	r2, r1
 8004d56:	4916      	ldr	r1, [pc, #88]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d5c:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fc fe02 	bl	8001970 <HAL_GetTick>
 8004d6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d6e:	e009      	b.n	8004d84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d70:	f7fc fdfe 	bl	8001970 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d902      	bls.n	8004d84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	73fb      	strb	r3, [r7, #15]
          break;
 8004d82:	e005      	b.n	8004d90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ef      	beq.n	8004d70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	4904      	ldr	r1, [pc, #16]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000

08004db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e049      	b.n	8004e5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fc fbea 	bl	80015b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f000 f9ee 	bl	80051d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d001      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e04f      	b.n	8004f1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01d      	beq.n	8004eda <HAL_TIM_Base_Start_IT+0x76>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea6:	d018      	beq.n	8004eda <HAL_TIM_Base_Start_IT+0x76>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1f      	ldr	r2, [pc, #124]	; (8004f2c <HAL_TIM_Base_Start_IT+0xc8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_TIM_Base_Start_IT+0x76>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1e      	ldr	r2, [pc, #120]	; (8004f30 <HAL_TIM_Base_Start_IT+0xcc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00e      	beq.n	8004eda <HAL_TIM_Base_Start_IT+0x76>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1c      	ldr	r2, [pc, #112]	; (8004f34 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_TIM_Base_Start_IT+0x76>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1b      	ldr	r2, [pc, #108]	; (8004f38 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_TIM_Base_Start_IT+0x76>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a19      	ldr	r2, [pc, #100]	; (8004f3c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d115      	bne.n	8004f06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b06      	cmp	r3, #6
 8004eea:	d015      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0xb4>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef2:	d011      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f04:	e008      	b.n	8004f18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e000      	b.n	8004f1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	40012c00 	.word	0x40012c00
 8004f2c:	40000400 	.word	0x40000400
 8004f30:	40000800 	.word	0x40000800
 8004f34:	40000c00 	.word	0x40000c00
 8004f38:	40013400 	.word	0x40013400
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	00010007 	.word	0x00010007

08004f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d122      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d11b      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0202 	mvn.w	r2, #2
 8004f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f905 	bl	8005196 <HAL_TIM_IC_CaptureCallback>
 8004f8c:	e005      	b.n	8004f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8f7 	bl	8005182 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f908 	bl	80051aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d122      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d11b      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0204 	mvn.w	r2, #4
 8004fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f8db 	bl	8005196 <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f8cd 	bl	8005182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f8de 	bl	80051aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d122      	bne.n	8005048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b08      	cmp	r3, #8
 800500e:	d11b      	bne.n	8005048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0208 	mvn.w	r2, #8
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2204      	movs	r2, #4
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f8b1 	bl	8005196 <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f8a3 	bl	8005182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f8b4 	bl	80051aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b10      	cmp	r3, #16
 8005054:	d122      	bne.n	800509c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b10      	cmp	r3, #16
 8005062:	d11b      	bne.n	800509c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0210 	mvn.w	r2, #16
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2208      	movs	r2, #8
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f887 	bl	8005196 <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f879 	bl	8005182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f88a 	bl	80051aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d10e      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d107      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0201 	mvn.w	r2, #1
 80050c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fb ff06 	bl	8000ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b80      	cmp	r3, #128	; 0x80
 80050d4:	d10e      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e0:	2b80      	cmp	r3, #128	; 0x80
 80050e2:	d107      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f914 	bl	800531c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005102:	d10e      	bne.n	8005122 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510e:	2b80      	cmp	r3, #128	; 0x80
 8005110:	d107      	bne.n	8005122 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800511a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f907 	bl	8005330 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b40      	cmp	r3, #64	; 0x40
 800512e:	d10e      	bne.n	800514e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d107      	bne.n	800514e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f838 	bl	80051be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b20      	cmp	r3, #32
 800515a:	d10e      	bne.n	800517a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b20      	cmp	r3, #32
 8005168:	d107      	bne.n	800517a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0220 	mvn.w	r2, #32
 8005172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f8c7 	bl	8005308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a40      	ldr	r2, [pc, #256]	; (80052e8 <TIM_Base_SetConfig+0x114>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d013      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f2:	d00f      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a3d      	ldr	r2, [pc, #244]	; (80052ec <TIM_Base_SetConfig+0x118>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00b      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a3c      	ldr	r2, [pc, #240]	; (80052f0 <TIM_Base_SetConfig+0x11c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a3b      	ldr	r2, [pc, #236]	; (80052f4 <TIM_Base_SetConfig+0x120>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a3a      	ldr	r2, [pc, #232]	; (80052f8 <TIM_Base_SetConfig+0x124>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d108      	bne.n	8005226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2f      	ldr	r2, [pc, #188]	; (80052e8 <TIM_Base_SetConfig+0x114>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01f      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005234:	d01b      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2c      	ldr	r2, [pc, #176]	; (80052ec <TIM_Base_SetConfig+0x118>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d017      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2b      	ldr	r2, [pc, #172]	; (80052f0 <TIM_Base_SetConfig+0x11c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a2a      	ldr	r2, [pc, #168]	; (80052f4 <TIM_Base_SetConfig+0x120>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00f      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a29      	ldr	r2, [pc, #164]	; (80052f8 <TIM_Base_SetConfig+0x124>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a28      	ldr	r2, [pc, #160]	; (80052fc <TIM_Base_SetConfig+0x128>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a27      	ldr	r2, [pc, #156]	; (8005300 <TIM_Base_SetConfig+0x12c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a26      	ldr	r2, [pc, #152]	; (8005304 <TIM_Base_SetConfig+0x130>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d108      	bne.n	8005280 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <TIM_Base_SetConfig+0x114>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00f      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <TIM_Base_SetConfig+0x124>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00b      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a11      	ldr	r2, [pc, #68]	; (80052fc <TIM_Base_SetConfig+0x128>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a10      	ldr	r2, [pc, #64]	; (8005300 <TIM_Base_SetConfig+0x12c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a0f      	ldr	r2, [pc, #60]	; (8005304 <TIM_Base_SetConfig+0x130>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d103      	bne.n	80052d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	615a      	str	r2, [r3, #20]
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800

08005308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e040      	b.n	80053d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc f966 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	; 0x24
 8005370:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0201 	bic.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f8c0 	bl	8005508 <UART_SetConfig>
 8005388:	4603      	mov	r3, r0
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e022      	b.n	80053d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fb6c 	bl	8005a78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fbf3 	bl	8005bbc <UART_CheckIdleState>
 80053d6:	4603      	mov	r3, r0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	; 0x28
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	f040 8082 	bne.w	80054fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_UART_Transmit+0x26>
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e07a      	b.n	8005500 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_UART_Transmit+0x38>
 8005414:	2302      	movs	r3, #2
 8005416:	e073      	b.n	8005500 <HAL_UART_Transmit+0x120>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2221      	movs	r2, #33	; 0x21
 800542c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800542e:	f7fc fa9f 	bl	8001970 <HAL_GetTick>
 8005432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	88fa      	ldrh	r2, [r7, #6]
 8005440:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544c:	d108      	bne.n	8005460 <HAL_UART_Transmit+0x80>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	e003      	b.n	8005468 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005470:	e02d      	b.n	80054ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2200      	movs	r2, #0
 800547a:	2180      	movs	r1, #128	; 0x80
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fbe6 	bl	8005c4e <UART_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e039      	b.n	8005500 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	881a      	ldrh	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800549e:	b292      	uxth	r2, r2
 80054a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	3302      	adds	r3, #2
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	e008      	b.n	80054bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	781a      	ldrb	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	b292      	uxth	r2, r2
 80054b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	3301      	adds	r3, #1
 80054ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1cb      	bne.n	8005472 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	2140      	movs	r1, #64	; 0x40
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 fbb2 	bl	8005c4e <UART_WaitOnFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e005      	b.n	8005500 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e000      	b.n	8005500 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
  }
}
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800550c:	b08a      	sub	sp, #40	; 0x28
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	431a      	orrs	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	431a      	orrs	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	4313      	orrs	r3, r2
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	4ba4      	ldr	r3, [pc, #656]	; (80057c8 <UART_SetConfig+0x2c0>)
 8005538:	4013      	ands	r3, r2
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005540:	430b      	orrs	r3, r1
 8005542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a99      	ldr	r2, [pc, #612]	; (80057cc <UART_SetConfig+0x2c4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005570:	4313      	orrs	r3, r2
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005584:	430a      	orrs	r2, r1
 8005586:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a90      	ldr	r2, [pc, #576]	; (80057d0 <UART_SetConfig+0x2c8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d126      	bne.n	80055e0 <UART_SetConfig+0xd8>
 8005592:	4b90      	ldr	r3, [pc, #576]	; (80057d4 <UART_SetConfig+0x2cc>)
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	2b03      	cmp	r3, #3
 800559e:	d81b      	bhi.n	80055d8 <UART_SetConfig+0xd0>
 80055a0:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <UART_SetConfig+0xa0>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	080055b9 	.word	0x080055b9
 80055ac:	080055c9 	.word	0x080055c9
 80055b0:	080055c1 	.word	0x080055c1
 80055b4:	080055d1 	.word	0x080055d1
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055be:	e116      	b.n	80057ee <UART_SetConfig+0x2e6>
 80055c0:	2302      	movs	r3, #2
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c6:	e112      	b.n	80057ee <UART_SetConfig+0x2e6>
 80055c8:	2304      	movs	r3, #4
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ce:	e10e      	b.n	80057ee <UART_SetConfig+0x2e6>
 80055d0:	2308      	movs	r3, #8
 80055d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d6:	e10a      	b.n	80057ee <UART_SetConfig+0x2e6>
 80055d8:	2310      	movs	r3, #16
 80055da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055de:	e106      	b.n	80057ee <UART_SetConfig+0x2e6>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a7c      	ldr	r2, [pc, #496]	; (80057d8 <UART_SetConfig+0x2d0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d138      	bne.n	800565c <UART_SetConfig+0x154>
 80055ea:	4b7a      	ldr	r3, [pc, #488]	; (80057d4 <UART_SetConfig+0x2cc>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	f003 030c 	and.w	r3, r3, #12
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	d82d      	bhi.n	8005654 <UART_SetConfig+0x14c>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <UART_SetConfig+0xf8>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005635 	.word	0x08005635
 8005604:	08005655 	.word	0x08005655
 8005608:	08005655 	.word	0x08005655
 800560c:	08005655 	.word	0x08005655
 8005610:	08005645 	.word	0x08005645
 8005614:	08005655 	.word	0x08005655
 8005618:	08005655 	.word	0x08005655
 800561c:	08005655 	.word	0x08005655
 8005620:	0800563d 	.word	0x0800563d
 8005624:	08005655 	.word	0x08005655
 8005628:	08005655 	.word	0x08005655
 800562c:	08005655 	.word	0x08005655
 8005630:	0800564d 	.word	0x0800564d
 8005634:	2300      	movs	r3, #0
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563a:	e0d8      	b.n	80057ee <UART_SetConfig+0x2e6>
 800563c:	2302      	movs	r3, #2
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005642:	e0d4      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005644:	2304      	movs	r3, #4
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564a:	e0d0      	b.n	80057ee <UART_SetConfig+0x2e6>
 800564c:	2308      	movs	r3, #8
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005652:	e0cc      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005654:	2310      	movs	r3, #16
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565a:	e0c8      	b.n	80057ee <UART_SetConfig+0x2e6>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a5e      	ldr	r2, [pc, #376]	; (80057dc <UART_SetConfig+0x2d4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d125      	bne.n	80056b2 <UART_SetConfig+0x1aa>
 8005666:	4b5b      	ldr	r3, [pc, #364]	; (80057d4 <UART_SetConfig+0x2cc>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005670:	2b30      	cmp	r3, #48	; 0x30
 8005672:	d016      	beq.n	80056a2 <UART_SetConfig+0x19a>
 8005674:	2b30      	cmp	r3, #48	; 0x30
 8005676:	d818      	bhi.n	80056aa <UART_SetConfig+0x1a2>
 8005678:	2b20      	cmp	r3, #32
 800567a:	d00a      	beq.n	8005692 <UART_SetConfig+0x18a>
 800567c:	2b20      	cmp	r3, #32
 800567e:	d814      	bhi.n	80056aa <UART_SetConfig+0x1a2>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <UART_SetConfig+0x182>
 8005684:	2b10      	cmp	r3, #16
 8005686:	d008      	beq.n	800569a <UART_SetConfig+0x192>
 8005688:	e00f      	b.n	80056aa <UART_SetConfig+0x1a2>
 800568a:	2300      	movs	r3, #0
 800568c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005690:	e0ad      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005692:	2302      	movs	r3, #2
 8005694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005698:	e0a9      	b.n	80057ee <UART_SetConfig+0x2e6>
 800569a:	2304      	movs	r3, #4
 800569c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a0:	e0a5      	b.n	80057ee <UART_SetConfig+0x2e6>
 80056a2:	2308      	movs	r3, #8
 80056a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a8:	e0a1      	b.n	80057ee <UART_SetConfig+0x2e6>
 80056aa:	2310      	movs	r3, #16
 80056ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056b0:	e09d      	b.n	80057ee <UART_SetConfig+0x2e6>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a4a      	ldr	r2, [pc, #296]	; (80057e0 <UART_SetConfig+0x2d8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d125      	bne.n	8005708 <UART_SetConfig+0x200>
 80056bc:	4b45      	ldr	r3, [pc, #276]	; (80057d4 <UART_SetConfig+0x2cc>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056c6:	2bc0      	cmp	r3, #192	; 0xc0
 80056c8:	d016      	beq.n	80056f8 <UART_SetConfig+0x1f0>
 80056ca:	2bc0      	cmp	r3, #192	; 0xc0
 80056cc:	d818      	bhi.n	8005700 <UART_SetConfig+0x1f8>
 80056ce:	2b80      	cmp	r3, #128	; 0x80
 80056d0:	d00a      	beq.n	80056e8 <UART_SetConfig+0x1e0>
 80056d2:	2b80      	cmp	r3, #128	; 0x80
 80056d4:	d814      	bhi.n	8005700 <UART_SetConfig+0x1f8>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <UART_SetConfig+0x1d8>
 80056da:	2b40      	cmp	r3, #64	; 0x40
 80056dc:	d008      	beq.n	80056f0 <UART_SetConfig+0x1e8>
 80056de:	e00f      	b.n	8005700 <UART_SetConfig+0x1f8>
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e6:	e082      	b.n	80057ee <UART_SetConfig+0x2e6>
 80056e8:	2302      	movs	r3, #2
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ee:	e07e      	b.n	80057ee <UART_SetConfig+0x2e6>
 80056f0:	2304      	movs	r3, #4
 80056f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f6:	e07a      	b.n	80057ee <UART_SetConfig+0x2e6>
 80056f8:	2308      	movs	r3, #8
 80056fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056fe:	e076      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005700:	2310      	movs	r3, #16
 8005702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005706:	e072      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a35      	ldr	r2, [pc, #212]	; (80057e4 <UART_SetConfig+0x2dc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d12a      	bne.n	8005768 <UART_SetConfig+0x260>
 8005712:	4b30      	ldr	r3, [pc, #192]	; (80057d4 <UART_SetConfig+0x2cc>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005720:	d01a      	beq.n	8005758 <UART_SetConfig+0x250>
 8005722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005726:	d81b      	bhi.n	8005760 <UART_SetConfig+0x258>
 8005728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572c:	d00c      	beq.n	8005748 <UART_SetConfig+0x240>
 800572e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005732:	d815      	bhi.n	8005760 <UART_SetConfig+0x258>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <UART_SetConfig+0x238>
 8005738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800573c:	d008      	beq.n	8005750 <UART_SetConfig+0x248>
 800573e:	e00f      	b.n	8005760 <UART_SetConfig+0x258>
 8005740:	2300      	movs	r3, #0
 8005742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005746:	e052      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005748:	2302      	movs	r3, #2
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574e:	e04e      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005750:	2304      	movs	r3, #4
 8005752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005756:	e04a      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005758:	2308      	movs	r3, #8
 800575a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800575e:	e046      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005760:	2310      	movs	r3, #16
 8005762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005766:	e042      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a17      	ldr	r2, [pc, #92]	; (80057cc <UART_SetConfig+0x2c4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d13a      	bne.n	80057e8 <UART_SetConfig+0x2e0>
 8005772:	4b18      	ldr	r3, [pc, #96]	; (80057d4 <UART_SetConfig+0x2cc>)
 8005774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005778:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800577c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005780:	d01a      	beq.n	80057b8 <UART_SetConfig+0x2b0>
 8005782:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005786:	d81b      	bhi.n	80057c0 <UART_SetConfig+0x2b8>
 8005788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578c:	d00c      	beq.n	80057a8 <UART_SetConfig+0x2a0>
 800578e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005792:	d815      	bhi.n	80057c0 <UART_SetConfig+0x2b8>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <UART_SetConfig+0x298>
 8005798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800579c:	d008      	beq.n	80057b0 <UART_SetConfig+0x2a8>
 800579e:	e00f      	b.n	80057c0 <UART_SetConfig+0x2b8>
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a6:	e022      	b.n	80057ee <UART_SetConfig+0x2e6>
 80057a8:	2302      	movs	r3, #2
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ae:	e01e      	b.n	80057ee <UART_SetConfig+0x2e6>
 80057b0:	2304      	movs	r3, #4
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b6:	e01a      	b.n	80057ee <UART_SetConfig+0x2e6>
 80057b8:	2308      	movs	r3, #8
 80057ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057be:	e016      	b.n	80057ee <UART_SetConfig+0x2e6>
 80057c0:	2310      	movs	r3, #16
 80057c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c6:	e012      	b.n	80057ee <UART_SetConfig+0x2e6>
 80057c8:	efff69f3 	.word	0xefff69f3
 80057cc:	40008000 	.word	0x40008000
 80057d0:	40013800 	.word	0x40013800
 80057d4:	40021000 	.word	0x40021000
 80057d8:	40004400 	.word	0x40004400
 80057dc:	40004800 	.word	0x40004800
 80057e0:	40004c00 	.word	0x40004c00
 80057e4:	40005000 	.word	0x40005000
 80057e8:	2310      	movs	r3, #16
 80057ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a9f      	ldr	r2, [pc, #636]	; (8005a70 <UART_SetConfig+0x568>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d17a      	bne.n	80058ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d824      	bhi.n	800584a <UART_SetConfig+0x342>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0x300>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800582d 	.word	0x0800582d
 800580c:	0800584b 	.word	0x0800584b
 8005810:	08005835 	.word	0x08005835
 8005814:	0800584b 	.word	0x0800584b
 8005818:	0800583b 	.word	0x0800583b
 800581c:	0800584b 	.word	0x0800584b
 8005820:	0800584b 	.word	0x0800584b
 8005824:	0800584b 	.word	0x0800584b
 8005828:	08005843 	.word	0x08005843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800582c:	f7fe fd7a 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005830:	61f8      	str	r0, [r7, #28]
        break;
 8005832:	e010      	b.n	8005856 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005834:	4b8f      	ldr	r3, [pc, #572]	; (8005a74 <UART_SetConfig+0x56c>)
 8005836:	61fb      	str	r3, [r7, #28]
        break;
 8005838:	e00d      	b.n	8005856 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583a:	f7fe fcdb 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 800583e:	61f8      	str	r0, [r7, #28]
        break;
 8005840:	e009      	b.n	8005856 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005846:	61fb      	str	r3, [r7, #28]
        break;
 8005848:	e005      	b.n	8005856 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80fb 	beq.w	8005a54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	4413      	add	r3, r2
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	429a      	cmp	r2, r3
 800586c:	d305      	bcc.n	800587a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	429a      	cmp	r2, r3
 8005878:	d903      	bls.n	8005882 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005880:	e0e8      	b.n	8005a54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2200      	movs	r2, #0
 8005886:	461c      	mov	r4, r3
 8005888:	4615      	mov	r5, r2
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	022b      	lsls	r3, r5, #8
 8005894:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005898:	0222      	lsls	r2, r4, #8
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	6849      	ldr	r1, [r1, #4]
 800589e:	0849      	lsrs	r1, r1, #1
 80058a0:	2000      	movs	r0, #0
 80058a2:	4688      	mov	r8, r1
 80058a4:	4681      	mov	r9, r0
 80058a6:	eb12 0a08 	adds.w	sl, r2, r8
 80058aa:	eb43 0b09 	adc.w	fp, r3, r9
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058bc:	4650      	mov	r0, sl
 80058be:	4659      	mov	r1, fp
 80058c0:	f7fb f972 	bl	8000ba8 <__aeabi_uldivmod>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4613      	mov	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d2:	d308      	bcc.n	80058e6 <UART_SetConfig+0x3de>
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058da:	d204      	bcs.n	80058e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	60da      	str	r2, [r3, #12]
 80058e4:	e0b6      	b.n	8005a54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058ec:	e0b2      	b.n	8005a54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f6:	d15e      	bne.n	80059b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80058f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d828      	bhi.n	8005952 <UART_SetConfig+0x44a>
 8005900:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <UART_SetConfig+0x400>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	0800592d 	.word	0x0800592d
 800590c:	08005935 	.word	0x08005935
 8005910:	0800593d 	.word	0x0800593d
 8005914:	08005953 	.word	0x08005953
 8005918:	08005943 	.word	0x08005943
 800591c:	08005953 	.word	0x08005953
 8005920:	08005953 	.word	0x08005953
 8005924:	08005953 	.word	0x08005953
 8005928:	0800594b 	.word	0x0800594b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800592c:	f7fe fcfa 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005930:	61f8      	str	r0, [r7, #28]
        break;
 8005932:	e014      	b.n	800595e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005934:	f7fe fd0c 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8005938:	61f8      	str	r0, [r7, #28]
        break;
 800593a:	e010      	b.n	800595e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800593c:	4b4d      	ldr	r3, [pc, #308]	; (8005a74 <UART_SetConfig+0x56c>)
 800593e:	61fb      	str	r3, [r7, #28]
        break;
 8005940:	e00d      	b.n	800595e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005942:	f7fe fc57 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005946:	61f8      	str	r0, [r7, #28]
        break;
 8005948:	e009      	b.n	800595e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800594a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800594e:	61fb      	str	r3, [r7, #28]
        break;
 8005950:	e005      	b.n	800595e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800595c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d077      	beq.n	8005a54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	005a      	lsls	r2, r3, #1
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	085b      	lsrs	r3, r3, #1
 800596e:	441a      	add	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b0f      	cmp	r3, #15
 800597e:	d916      	bls.n	80059ae <UART_SetConfig+0x4a6>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005986:	d212      	bcs.n	80059ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f023 030f 	bic.w	r3, r3, #15
 8005990:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	b29b      	uxth	r3, r3
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	b29a      	uxth	r2, r3
 800599e:	8afb      	ldrh	r3, [r7, #22]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	8afa      	ldrh	r2, [r7, #22]
 80059aa:	60da      	str	r2, [r3, #12]
 80059ac:	e052      	b.n	8005a54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059b4:	e04e      	b.n	8005a54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d827      	bhi.n	8005a0e <UART_SetConfig+0x506>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <UART_SetConfig+0x4bc>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	080059f1 	.word	0x080059f1
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	08005a0f 	.word	0x08005a0f
 80059d4:	080059ff 	.word	0x080059ff
 80059d8:	08005a0f 	.word	0x08005a0f
 80059dc:	08005a0f 	.word	0x08005a0f
 80059e0:	08005a0f 	.word	0x08005a0f
 80059e4:	08005a07 	.word	0x08005a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7fe fc9c 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 80059ec:	61f8      	str	r0, [r7, #28]
        break;
 80059ee:	e014      	b.n	8005a1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f0:	f7fe fcae 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 80059f4:	61f8      	str	r0, [r7, #28]
        break;
 80059f6:	e010      	b.n	8005a1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f8:	4b1e      	ldr	r3, [pc, #120]	; (8005a74 <UART_SetConfig+0x56c>)
 80059fa:	61fb      	str	r3, [r7, #28]
        break;
 80059fc:	e00d      	b.n	8005a1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fe:	f7fe fbf9 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005a02:	61f8      	str	r0, [r7, #28]
        break;
 8005a04:	e009      	b.n	8005a1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a0a:	61fb      	str	r3, [r7, #28]
        break;
 8005a0c:	e005      	b.n	8005a1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a18:	bf00      	nop
    }

    if (pclk != 0U)
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d019      	beq.n	8005a54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	085a      	lsrs	r2, r3, #1
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	441a      	add	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	d909      	bls.n	8005a4e <UART_SetConfig+0x546>
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a40:	d205      	bcs.n	8005a4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60da      	str	r2, [r3, #12]
 8005a4c:	e002      	b.n	8005a54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3728      	adds	r7, #40	; 0x28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a6e:	bf00      	nop
 8005a70:	40008000 	.word	0x40008000
 8005a74:	00f42400 	.word	0x00f42400

08005a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01a      	beq.n	8005b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b76:	d10a      	bne.n	8005b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bcc:	f7fb fed0 	bl	8001970 <HAL_GetTick>
 8005bd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d10e      	bne.n	8005bfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f82d 	bl	8005c4e <UART_WaitOnFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e023      	b.n	8005c46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d10e      	bne.n	8005c2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f817 	bl	8005c4e <UART_WaitOnFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e00d      	b.n	8005c46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b09c      	sub	sp, #112	; 0x70
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	603b      	str	r3, [r7, #0]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5e:	e0a5      	b.n	8005dac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c66:	f000 80a1 	beq.w	8005dac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c6a:	f7fb fe81 	bl	8001970 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d302      	bcc.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d13e      	bne.n	8005cfe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c94:	667b      	str	r3, [r7, #100]	; 0x64
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e6      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	663b      	str	r3, [r7, #96]	; 0x60
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3308      	adds	r3, #8
 8005cd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e5      	bne.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e067      	b.n	8005dce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d04f      	beq.n	8005dac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d1a:	d147      	bne.n	8005dac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d24:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
 8005d46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e6      	bne.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	613b      	str	r3, [r7, #16]
   return(result);
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f023 0301 	bic.w	r3, r3, #1
 8005d6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3308      	adds	r3, #8
 8005d76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d78:	623a      	str	r2, [r7, #32]
 8005d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	69f9      	ldr	r1, [r7, #28]
 8005d7e:	6a3a      	ldr	r2, [r7, #32]
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e5      	bne.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e010      	b.n	8005dce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4013      	ands	r3, r2
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	bf0c      	ite	eq
 8005dbc:	2301      	moveq	r3, #1
 8005dbe:	2300      	movne	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	f43f af4a 	beq.w	8005c60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3770      	adds	r7, #112	; 0x70
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <__errno>:
 8005dd8:	4b01      	ldr	r3, [pc, #4]	; (8005de0 <__errno+0x8>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	2000000c 	.word	0x2000000c

08005de4 <__libc_init_array>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	4d0d      	ldr	r5, [pc, #52]	; (8005e1c <__libc_init_array+0x38>)
 8005de8:	4c0d      	ldr	r4, [pc, #52]	; (8005e20 <__libc_init_array+0x3c>)
 8005dea:	1b64      	subs	r4, r4, r5
 8005dec:	10a4      	asrs	r4, r4, #2
 8005dee:	2600      	movs	r6, #0
 8005df0:	42a6      	cmp	r6, r4
 8005df2:	d109      	bne.n	8005e08 <__libc_init_array+0x24>
 8005df4:	4d0b      	ldr	r5, [pc, #44]	; (8005e24 <__libc_init_array+0x40>)
 8005df6:	4c0c      	ldr	r4, [pc, #48]	; (8005e28 <__libc_init_array+0x44>)
 8005df8:	f001 fbbc 	bl	8007574 <_init>
 8005dfc:	1b64      	subs	r4, r4, r5
 8005dfe:	10a4      	asrs	r4, r4, #2
 8005e00:	2600      	movs	r6, #0
 8005e02:	42a6      	cmp	r6, r4
 8005e04:	d105      	bne.n	8005e12 <__libc_init_array+0x2e>
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
 8005e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0c:	4798      	blx	r3
 8005e0e:	3601      	adds	r6, #1
 8005e10:	e7ee      	b.n	8005df0 <__libc_init_array+0xc>
 8005e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e16:	4798      	blx	r3
 8005e18:	3601      	adds	r6, #1
 8005e1a:	e7f2      	b.n	8005e02 <__libc_init_array+0x1e>
 8005e1c:	08007678 	.word	0x08007678
 8005e20:	08007678 	.word	0x08007678
 8005e24:	08007678 	.word	0x08007678
 8005e28:	0800767c 	.word	0x0800767c

08005e2c <memset>:
 8005e2c:	4402      	add	r2, r0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d100      	bne.n	8005e36 <memset+0xa>
 8005e34:	4770      	bx	lr
 8005e36:	f803 1b01 	strb.w	r1, [r3], #1
 8005e3a:	e7f9      	b.n	8005e30 <memset+0x4>

08005e3c <sniprintf>:
 8005e3c:	b40c      	push	{r2, r3}
 8005e3e:	b530      	push	{r4, r5, lr}
 8005e40:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <sniprintf+0x64>)
 8005e42:	1e0c      	subs	r4, r1, #0
 8005e44:	681d      	ldr	r5, [r3, #0]
 8005e46:	b09d      	sub	sp, #116	; 0x74
 8005e48:	da08      	bge.n	8005e5c <sniprintf+0x20>
 8005e4a:	238b      	movs	r3, #139	; 0x8b
 8005e4c:	602b      	str	r3, [r5, #0]
 8005e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e52:	b01d      	add	sp, #116	; 0x74
 8005e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e58:	b002      	add	sp, #8
 8005e5a:	4770      	bx	lr
 8005e5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e64:	bf14      	ite	ne
 8005e66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e6a:	4623      	moveq	r3, r4
 8005e6c:	9304      	str	r3, [sp, #16]
 8005e6e:	9307      	str	r3, [sp, #28]
 8005e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e74:	9002      	str	r0, [sp, #8]
 8005e76:	9006      	str	r0, [sp, #24]
 8005e78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e7e:	ab21      	add	r3, sp, #132	; 0x84
 8005e80:	a902      	add	r1, sp, #8
 8005e82:	4628      	mov	r0, r5
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	f000 f869 	bl	8005f5c <_svfiprintf_r>
 8005e8a:	1c43      	adds	r3, r0, #1
 8005e8c:	bfbc      	itt	lt
 8005e8e:	238b      	movlt	r3, #139	; 0x8b
 8005e90:	602b      	strlt	r3, [r5, #0]
 8005e92:	2c00      	cmp	r4, #0
 8005e94:	d0dd      	beq.n	8005e52 <sniprintf+0x16>
 8005e96:	9b02      	ldr	r3, [sp, #8]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	e7d9      	b.n	8005e52 <sniprintf+0x16>
 8005e9e:	bf00      	nop
 8005ea0:	2000000c 	.word	0x2000000c

08005ea4 <__ssputs_r>:
 8005ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea8:	688e      	ldr	r6, [r1, #8]
 8005eaa:	429e      	cmp	r6, r3
 8005eac:	4682      	mov	sl, r0
 8005eae:	460c      	mov	r4, r1
 8005eb0:	4690      	mov	r8, r2
 8005eb2:	461f      	mov	r7, r3
 8005eb4:	d838      	bhi.n	8005f28 <__ssputs_r+0x84>
 8005eb6:	898a      	ldrh	r2, [r1, #12]
 8005eb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ebc:	d032      	beq.n	8005f24 <__ssputs_r+0x80>
 8005ebe:	6825      	ldr	r5, [r4, #0]
 8005ec0:	6909      	ldr	r1, [r1, #16]
 8005ec2:	eba5 0901 	sub.w	r9, r5, r1
 8005ec6:	6965      	ldr	r5, [r4, #20]
 8005ec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ecc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	444b      	add	r3, r9
 8005ed4:	106d      	asrs	r5, r5, #1
 8005ed6:	429d      	cmp	r5, r3
 8005ed8:	bf38      	it	cc
 8005eda:	461d      	movcc	r5, r3
 8005edc:	0553      	lsls	r3, r2, #21
 8005ede:	d531      	bpl.n	8005f44 <__ssputs_r+0xa0>
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f000 fb63 	bl	80065ac <_malloc_r>
 8005ee6:	4606      	mov	r6, r0
 8005ee8:	b950      	cbnz	r0, 8005f00 <__ssputs_r+0x5c>
 8005eea:	230c      	movs	r3, #12
 8005eec:	f8ca 3000 	str.w	r3, [sl]
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	6921      	ldr	r1, [r4, #16]
 8005f02:	464a      	mov	r2, r9
 8005f04:	f000 fabe 	bl	8006484 <memcpy>
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f12:	81a3      	strh	r3, [r4, #12]
 8005f14:	6126      	str	r6, [r4, #16]
 8005f16:	6165      	str	r5, [r4, #20]
 8005f18:	444e      	add	r6, r9
 8005f1a:	eba5 0509 	sub.w	r5, r5, r9
 8005f1e:	6026      	str	r6, [r4, #0]
 8005f20:	60a5      	str	r5, [r4, #8]
 8005f22:	463e      	mov	r6, r7
 8005f24:	42be      	cmp	r6, r7
 8005f26:	d900      	bls.n	8005f2a <__ssputs_r+0x86>
 8005f28:	463e      	mov	r6, r7
 8005f2a:	6820      	ldr	r0, [r4, #0]
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	4641      	mov	r1, r8
 8005f30:	f000 fab6 	bl	80064a0 <memmove>
 8005f34:	68a3      	ldr	r3, [r4, #8]
 8005f36:	1b9b      	subs	r3, r3, r6
 8005f38:	60a3      	str	r3, [r4, #8]
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	4433      	add	r3, r6
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	2000      	movs	r0, #0
 8005f42:	e7db      	b.n	8005efc <__ssputs_r+0x58>
 8005f44:	462a      	mov	r2, r5
 8005f46:	f000 fba5 	bl	8006694 <_realloc_r>
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d1e1      	bne.n	8005f14 <__ssputs_r+0x70>
 8005f50:	6921      	ldr	r1, [r4, #16]
 8005f52:	4650      	mov	r0, sl
 8005f54:	f000 fabe 	bl	80064d4 <_free_r>
 8005f58:	e7c7      	b.n	8005eea <__ssputs_r+0x46>
	...

08005f5c <_svfiprintf_r>:
 8005f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f60:	4698      	mov	r8, r3
 8005f62:	898b      	ldrh	r3, [r1, #12]
 8005f64:	061b      	lsls	r3, r3, #24
 8005f66:	b09d      	sub	sp, #116	; 0x74
 8005f68:	4607      	mov	r7, r0
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	4614      	mov	r4, r2
 8005f6e:	d50e      	bpl.n	8005f8e <_svfiprintf_r+0x32>
 8005f70:	690b      	ldr	r3, [r1, #16]
 8005f72:	b963      	cbnz	r3, 8005f8e <_svfiprintf_r+0x32>
 8005f74:	2140      	movs	r1, #64	; 0x40
 8005f76:	f000 fb19 	bl	80065ac <_malloc_r>
 8005f7a:	6028      	str	r0, [r5, #0]
 8005f7c:	6128      	str	r0, [r5, #16]
 8005f7e:	b920      	cbnz	r0, 8005f8a <_svfiprintf_r+0x2e>
 8005f80:	230c      	movs	r3, #12
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	e0d1      	b.n	800612e <_svfiprintf_r+0x1d2>
 8005f8a:	2340      	movs	r3, #64	; 0x40
 8005f8c:	616b      	str	r3, [r5, #20]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9309      	str	r3, [sp, #36]	; 0x24
 8005f92:	2320      	movs	r3, #32
 8005f94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f9c:	2330      	movs	r3, #48	; 0x30
 8005f9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006148 <_svfiprintf_r+0x1ec>
 8005fa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fa6:	f04f 0901 	mov.w	r9, #1
 8005faa:	4623      	mov	r3, r4
 8005fac:	469a      	mov	sl, r3
 8005fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fb2:	b10a      	cbz	r2, 8005fb8 <_svfiprintf_r+0x5c>
 8005fb4:	2a25      	cmp	r2, #37	; 0x25
 8005fb6:	d1f9      	bne.n	8005fac <_svfiprintf_r+0x50>
 8005fb8:	ebba 0b04 	subs.w	fp, sl, r4
 8005fbc:	d00b      	beq.n	8005fd6 <_svfiprintf_r+0x7a>
 8005fbe:	465b      	mov	r3, fp
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	4638      	mov	r0, r7
 8005fc6:	f7ff ff6d 	bl	8005ea4 <__ssputs_r>
 8005fca:	3001      	adds	r0, #1
 8005fcc:	f000 80aa 	beq.w	8006124 <_svfiprintf_r+0x1c8>
 8005fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fd2:	445a      	add	r2, fp
 8005fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8005fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 80a2 	beq.w	8006124 <_svfiprintf_r+0x1c8>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fea:	f10a 0a01 	add.w	sl, sl, #1
 8005fee:	9304      	str	r3, [sp, #16]
 8005ff0:	9307      	str	r3, [sp, #28]
 8005ff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ff6:	931a      	str	r3, [sp, #104]	; 0x68
 8005ff8:	4654      	mov	r4, sl
 8005ffa:	2205      	movs	r2, #5
 8005ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006000:	4851      	ldr	r0, [pc, #324]	; (8006148 <_svfiprintf_r+0x1ec>)
 8006002:	f7fa f8ed 	bl	80001e0 <memchr>
 8006006:	9a04      	ldr	r2, [sp, #16]
 8006008:	b9d8      	cbnz	r0, 8006042 <_svfiprintf_r+0xe6>
 800600a:	06d0      	lsls	r0, r2, #27
 800600c:	bf44      	itt	mi
 800600e:	2320      	movmi	r3, #32
 8006010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006014:	0711      	lsls	r1, r2, #28
 8006016:	bf44      	itt	mi
 8006018:	232b      	movmi	r3, #43	; 0x2b
 800601a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800601e:	f89a 3000 	ldrb.w	r3, [sl]
 8006022:	2b2a      	cmp	r3, #42	; 0x2a
 8006024:	d015      	beq.n	8006052 <_svfiprintf_r+0xf6>
 8006026:	9a07      	ldr	r2, [sp, #28]
 8006028:	4654      	mov	r4, sl
 800602a:	2000      	movs	r0, #0
 800602c:	f04f 0c0a 	mov.w	ip, #10
 8006030:	4621      	mov	r1, r4
 8006032:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006036:	3b30      	subs	r3, #48	; 0x30
 8006038:	2b09      	cmp	r3, #9
 800603a:	d94e      	bls.n	80060da <_svfiprintf_r+0x17e>
 800603c:	b1b0      	cbz	r0, 800606c <_svfiprintf_r+0x110>
 800603e:	9207      	str	r2, [sp, #28]
 8006040:	e014      	b.n	800606c <_svfiprintf_r+0x110>
 8006042:	eba0 0308 	sub.w	r3, r0, r8
 8006046:	fa09 f303 	lsl.w	r3, r9, r3
 800604a:	4313      	orrs	r3, r2
 800604c:	9304      	str	r3, [sp, #16]
 800604e:	46a2      	mov	sl, r4
 8006050:	e7d2      	b.n	8005ff8 <_svfiprintf_r+0x9c>
 8006052:	9b03      	ldr	r3, [sp, #12]
 8006054:	1d19      	adds	r1, r3, #4
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	9103      	str	r1, [sp, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	bfbb      	ittet	lt
 800605e:	425b      	neglt	r3, r3
 8006060:	f042 0202 	orrlt.w	r2, r2, #2
 8006064:	9307      	strge	r3, [sp, #28]
 8006066:	9307      	strlt	r3, [sp, #28]
 8006068:	bfb8      	it	lt
 800606a:	9204      	strlt	r2, [sp, #16]
 800606c:	7823      	ldrb	r3, [r4, #0]
 800606e:	2b2e      	cmp	r3, #46	; 0x2e
 8006070:	d10c      	bne.n	800608c <_svfiprintf_r+0x130>
 8006072:	7863      	ldrb	r3, [r4, #1]
 8006074:	2b2a      	cmp	r3, #42	; 0x2a
 8006076:	d135      	bne.n	80060e4 <_svfiprintf_r+0x188>
 8006078:	9b03      	ldr	r3, [sp, #12]
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	9203      	str	r2, [sp, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	bfb8      	it	lt
 8006084:	f04f 33ff 	movlt.w	r3, #4294967295
 8006088:	3402      	adds	r4, #2
 800608a:	9305      	str	r3, [sp, #20]
 800608c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006158 <_svfiprintf_r+0x1fc>
 8006090:	7821      	ldrb	r1, [r4, #0]
 8006092:	2203      	movs	r2, #3
 8006094:	4650      	mov	r0, sl
 8006096:	f7fa f8a3 	bl	80001e0 <memchr>
 800609a:	b140      	cbz	r0, 80060ae <_svfiprintf_r+0x152>
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	eba0 000a 	sub.w	r0, r0, sl
 80060a2:	fa03 f000 	lsl.w	r0, r3, r0
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	4303      	orrs	r3, r0
 80060aa:	3401      	adds	r4, #1
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b2:	4826      	ldr	r0, [pc, #152]	; (800614c <_svfiprintf_r+0x1f0>)
 80060b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060b8:	2206      	movs	r2, #6
 80060ba:	f7fa f891 	bl	80001e0 <memchr>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d038      	beq.n	8006134 <_svfiprintf_r+0x1d8>
 80060c2:	4b23      	ldr	r3, [pc, #140]	; (8006150 <_svfiprintf_r+0x1f4>)
 80060c4:	bb1b      	cbnz	r3, 800610e <_svfiprintf_r+0x1b2>
 80060c6:	9b03      	ldr	r3, [sp, #12]
 80060c8:	3307      	adds	r3, #7
 80060ca:	f023 0307 	bic.w	r3, r3, #7
 80060ce:	3308      	adds	r3, #8
 80060d0:	9303      	str	r3, [sp, #12]
 80060d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d4:	4433      	add	r3, r6
 80060d6:	9309      	str	r3, [sp, #36]	; 0x24
 80060d8:	e767      	b.n	8005faa <_svfiprintf_r+0x4e>
 80060da:	fb0c 3202 	mla	r2, ip, r2, r3
 80060de:	460c      	mov	r4, r1
 80060e0:	2001      	movs	r0, #1
 80060e2:	e7a5      	b.n	8006030 <_svfiprintf_r+0xd4>
 80060e4:	2300      	movs	r3, #0
 80060e6:	3401      	adds	r4, #1
 80060e8:	9305      	str	r3, [sp, #20]
 80060ea:	4619      	mov	r1, r3
 80060ec:	f04f 0c0a 	mov.w	ip, #10
 80060f0:	4620      	mov	r0, r4
 80060f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060f6:	3a30      	subs	r2, #48	; 0x30
 80060f8:	2a09      	cmp	r2, #9
 80060fa:	d903      	bls.n	8006104 <_svfiprintf_r+0x1a8>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0c5      	beq.n	800608c <_svfiprintf_r+0x130>
 8006100:	9105      	str	r1, [sp, #20]
 8006102:	e7c3      	b.n	800608c <_svfiprintf_r+0x130>
 8006104:	fb0c 2101 	mla	r1, ip, r1, r2
 8006108:	4604      	mov	r4, r0
 800610a:	2301      	movs	r3, #1
 800610c:	e7f0      	b.n	80060f0 <_svfiprintf_r+0x194>
 800610e:	ab03      	add	r3, sp, #12
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	462a      	mov	r2, r5
 8006114:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <_svfiprintf_r+0x1f8>)
 8006116:	a904      	add	r1, sp, #16
 8006118:	4638      	mov	r0, r7
 800611a:	f3af 8000 	nop.w
 800611e:	1c42      	adds	r2, r0, #1
 8006120:	4606      	mov	r6, r0
 8006122:	d1d6      	bne.n	80060d2 <_svfiprintf_r+0x176>
 8006124:	89ab      	ldrh	r3, [r5, #12]
 8006126:	065b      	lsls	r3, r3, #25
 8006128:	f53f af2c 	bmi.w	8005f84 <_svfiprintf_r+0x28>
 800612c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800612e:	b01d      	add	sp, #116	; 0x74
 8006130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006134:	ab03      	add	r3, sp, #12
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	462a      	mov	r2, r5
 800613a:	4b06      	ldr	r3, [pc, #24]	; (8006154 <_svfiprintf_r+0x1f8>)
 800613c:	a904      	add	r1, sp, #16
 800613e:	4638      	mov	r0, r7
 8006140:	f000 f87a 	bl	8006238 <_printf_i>
 8006144:	e7eb      	b.n	800611e <_svfiprintf_r+0x1c2>
 8006146:	bf00      	nop
 8006148:	0800760c 	.word	0x0800760c
 800614c:	08007616 	.word	0x08007616
 8006150:	00000000 	.word	0x00000000
 8006154:	08005ea5 	.word	0x08005ea5
 8006158:	08007612 	.word	0x08007612

0800615c <_printf_common>:
 800615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006160:	4616      	mov	r6, r2
 8006162:	4699      	mov	r9, r3
 8006164:	688a      	ldr	r2, [r1, #8]
 8006166:	690b      	ldr	r3, [r1, #16]
 8006168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800616c:	4293      	cmp	r3, r2
 800616e:	bfb8      	it	lt
 8006170:	4613      	movlt	r3, r2
 8006172:	6033      	str	r3, [r6, #0]
 8006174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006178:	4607      	mov	r7, r0
 800617a:	460c      	mov	r4, r1
 800617c:	b10a      	cbz	r2, 8006182 <_printf_common+0x26>
 800617e:	3301      	adds	r3, #1
 8006180:	6033      	str	r3, [r6, #0]
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	0699      	lsls	r1, r3, #26
 8006186:	bf42      	ittt	mi
 8006188:	6833      	ldrmi	r3, [r6, #0]
 800618a:	3302      	addmi	r3, #2
 800618c:	6033      	strmi	r3, [r6, #0]
 800618e:	6825      	ldr	r5, [r4, #0]
 8006190:	f015 0506 	ands.w	r5, r5, #6
 8006194:	d106      	bne.n	80061a4 <_printf_common+0x48>
 8006196:	f104 0a19 	add.w	sl, r4, #25
 800619a:	68e3      	ldr	r3, [r4, #12]
 800619c:	6832      	ldr	r2, [r6, #0]
 800619e:	1a9b      	subs	r3, r3, r2
 80061a0:	42ab      	cmp	r3, r5
 80061a2:	dc26      	bgt.n	80061f2 <_printf_common+0x96>
 80061a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061a8:	1e13      	subs	r3, r2, #0
 80061aa:	6822      	ldr	r2, [r4, #0]
 80061ac:	bf18      	it	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	0692      	lsls	r2, r2, #26
 80061b2:	d42b      	bmi.n	800620c <_printf_common+0xb0>
 80061b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061b8:	4649      	mov	r1, r9
 80061ba:	4638      	mov	r0, r7
 80061bc:	47c0      	blx	r8
 80061be:	3001      	adds	r0, #1
 80061c0:	d01e      	beq.n	8006200 <_printf_common+0xa4>
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	68e5      	ldr	r5, [r4, #12]
 80061c6:	6832      	ldr	r2, [r6, #0]
 80061c8:	f003 0306 	and.w	r3, r3, #6
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	bf08      	it	eq
 80061d0:	1aad      	subeq	r5, r5, r2
 80061d2:	68a3      	ldr	r3, [r4, #8]
 80061d4:	6922      	ldr	r2, [r4, #16]
 80061d6:	bf0c      	ite	eq
 80061d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061dc:	2500      	movne	r5, #0
 80061de:	4293      	cmp	r3, r2
 80061e0:	bfc4      	itt	gt
 80061e2:	1a9b      	subgt	r3, r3, r2
 80061e4:	18ed      	addgt	r5, r5, r3
 80061e6:	2600      	movs	r6, #0
 80061e8:	341a      	adds	r4, #26
 80061ea:	42b5      	cmp	r5, r6
 80061ec:	d11a      	bne.n	8006224 <_printf_common+0xc8>
 80061ee:	2000      	movs	r0, #0
 80061f0:	e008      	b.n	8006204 <_printf_common+0xa8>
 80061f2:	2301      	movs	r3, #1
 80061f4:	4652      	mov	r2, sl
 80061f6:	4649      	mov	r1, r9
 80061f8:	4638      	mov	r0, r7
 80061fa:	47c0      	blx	r8
 80061fc:	3001      	adds	r0, #1
 80061fe:	d103      	bne.n	8006208 <_printf_common+0xac>
 8006200:	f04f 30ff 	mov.w	r0, #4294967295
 8006204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006208:	3501      	adds	r5, #1
 800620a:	e7c6      	b.n	800619a <_printf_common+0x3e>
 800620c:	18e1      	adds	r1, r4, r3
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	2030      	movs	r0, #48	; 0x30
 8006212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006216:	4422      	add	r2, r4
 8006218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800621c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006220:	3302      	adds	r3, #2
 8006222:	e7c7      	b.n	80061b4 <_printf_common+0x58>
 8006224:	2301      	movs	r3, #1
 8006226:	4622      	mov	r2, r4
 8006228:	4649      	mov	r1, r9
 800622a:	4638      	mov	r0, r7
 800622c:	47c0      	blx	r8
 800622e:	3001      	adds	r0, #1
 8006230:	d0e6      	beq.n	8006200 <_printf_common+0xa4>
 8006232:	3601      	adds	r6, #1
 8006234:	e7d9      	b.n	80061ea <_printf_common+0x8e>
	...

08006238 <_printf_i>:
 8006238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800623c:	7e0f      	ldrb	r7, [r1, #24]
 800623e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006240:	2f78      	cmp	r7, #120	; 0x78
 8006242:	4691      	mov	r9, r2
 8006244:	4680      	mov	r8, r0
 8006246:	460c      	mov	r4, r1
 8006248:	469a      	mov	sl, r3
 800624a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800624e:	d807      	bhi.n	8006260 <_printf_i+0x28>
 8006250:	2f62      	cmp	r7, #98	; 0x62
 8006252:	d80a      	bhi.n	800626a <_printf_i+0x32>
 8006254:	2f00      	cmp	r7, #0
 8006256:	f000 80d8 	beq.w	800640a <_printf_i+0x1d2>
 800625a:	2f58      	cmp	r7, #88	; 0x58
 800625c:	f000 80a3 	beq.w	80063a6 <_printf_i+0x16e>
 8006260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006268:	e03a      	b.n	80062e0 <_printf_i+0xa8>
 800626a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800626e:	2b15      	cmp	r3, #21
 8006270:	d8f6      	bhi.n	8006260 <_printf_i+0x28>
 8006272:	a101      	add	r1, pc, #4	; (adr r1, 8006278 <_printf_i+0x40>)
 8006274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006278:	080062d1 	.word	0x080062d1
 800627c:	080062e5 	.word	0x080062e5
 8006280:	08006261 	.word	0x08006261
 8006284:	08006261 	.word	0x08006261
 8006288:	08006261 	.word	0x08006261
 800628c:	08006261 	.word	0x08006261
 8006290:	080062e5 	.word	0x080062e5
 8006294:	08006261 	.word	0x08006261
 8006298:	08006261 	.word	0x08006261
 800629c:	08006261 	.word	0x08006261
 80062a0:	08006261 	.word	0x08006261
 80062a4:	080063f1 	.word	0x080063f1
 80062a8:	08006315 	.word	0x08006315
 80062ac:	080063d3 	.word	0x080063d3
 80062b0:	08006261 	.word	0x08006261
 80062b4:	08006261 	.word	0x08006261
 80062b8:	08006413 	.word	0x08006413
 80062bc:	08006261 	.word	0x08006261
 80062c0:	08006315 	.word	0x08006315
 80062c4:	08006261 	.word	0x08006261
 80062c8:	08006261 	.word	0x08006261
 80062cc:	080063db 	.word	0x080063db
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	1d1a      	adds	r2, r3, #4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	602a      	str	r2, [r5, #0]
 80062d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0a3      	b.n	800642c <_printf_i+0x1f4>
 80062e4:	6820      	ldr	r0, [r4, #0]
 80062e6:	6829      	ldr	r1, [r5, #0]
 80062e8:	0606      	lsls	r6, r0, #24
 80062ea:	f101 0304 	add.w	r3, r1, #4
 80062ee:	d50a      	bpl.n	8006306 <_printf_i+0xce>
 80062f0:	680e      	ldr	r6, [r1, #0]
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	2e00      	cmp	r6, #0
 80062f6:	da03      	bge.n	8006300 <_printf_i+0xc8>
 80062f8:	232d      	movs	r3, #45	; 0x2d
 80062fa:	4276      	negs	r6, r6
 80062fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006300:	485e      	ldr	r0, [pc, #376]	; (800647c <_printf_i+0x244>)
 8006302:	230a      	movs	r3, #10
 8006304:	e019      	b.n	800633a <_printf_i+0x102>
 8006306:	680e      	ldr	r6, [r1, #0]
 8006308:	602b      	str	r3, [r5, #0]
 800630a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800630e:	bf18      	it	ne
 8006310:	b236      	sxthne	r6, r6
 8006312:	e7ef      	b.n	80062f4 <_printf_i+0xbc>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	6820      	ldr	r0, [r4, #0]
 8006318:	1d19      	adds	r1, r3, #4
 800631a:	6029      	str	r1, [r5, #0]
 800631c:	0601      	lsls	r1, r0, #24
 800631e:	d501      	bpl.n	8006324 <_printf_i+0xec>
 8006320:	681e      	ldr	r6, [r3, #0]
 8006322:	e002      	b.n	800632a <_printf_i+0xf2>
 8006324:	0646      	lsls	r6, r0, #25
 8006326:	d5fb      	bpl.n	8006320 <_printf_i+0xe8>
 8006328:	881e      	ldrh	r6, [r3, #0]
 800632a:	4854      	ldr	r0, [pc, #336]	; (800647c <_printf_i+0x244>)
 800632c:	2f6f      	cmp	r7, #111	; 0x6f
 800632e:	bf0c      	ite	eq
 8006330:	2308      	moveq	r3, #8
 8006332:	230a      	movne	r3, #10
 8006334:	2100      	movs	r1, #0
 8006336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800633a:	6865      	ldr	r5, [r4, #4]
 800633c:	60a5      	str	r5, [r4, #8]
 800633e:	2d00      	cmp	r5, #0
 8006340:	bfa2      	ittt	ge
 8006342:	6821      	ldrge	r1, [r4, #0]
 8006344:	f021 0104 	bicge.w	r1, r1, #4
 8006348:	6021      	strge	r1, [r4, #0]
 800634a:	b90e      	cbnz	r6, 8006350 <_printf_i+0x118>
 800634c:	2d00      	cmp	r5, #0
 800634e:	d04d      	beq.n	80063ec <_printf_i+0x1b4>
 8006350:	4615      	mov	r5, r2
 8006352:	fbb6 f1f3 	udiv	r1, r6, r3
 8006356:	fb03 6711 	mls	r7, r3, r1, r6
 800635a:	5dc7      	ldrb	r7, [r0, r7]
 800635c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006360:	4637      	mov	r7, r6
 8006362:	42bb      	cmp	r3, r7
 8006364:	460e      	mov	r6, r1
 8006366:	d9f4      	bls.n	8006352 <_printf_i+0x11a>
 8006368:	2b08      	cmp	r3, #8
 800636a:	d10b      	bne.n	8006384 <_printf_i+0x14c>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	07de      	lsls	r6, r3, #31
 8006370:	d508      	bpl.n	8006384 <_printf_i+0x14c>
 8006372:	6923      	ldr	r3, [r4, #16]
 8006374:	6861      	ldr	r1, [r4, #4]
 8006376:	4299      	cmp	r1, r3
 8006378:	bfde      	ittt	le
 800637a:	2330      	movle	r3, #48	; 0x30
 800637c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006380:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006384:	1b52      	subs	r2, r2, r5
 8006386:	6122      	str	r2, [r4, #16]
 8006388:	f8cd a000 	str.w	sl, [sp]
 800638c:	464b      	mov	r3, r9
 800638e:	aa03      	add	r2, sp, #12
 8006390:	4621      	mov	r1, r4
 8006392:	4640      	mov	r0, r8
 8006394:	f7ff fee2 	bl	800615c <_printf_common>
 8006398:	3001      	adds	r0, #1
 800639a:	d14c      	bne.n	8006436 <_printf_i+0x1fe>
 800639c:	f04f 30ff 	mov.w	r0, #4294967295
 80063a0:	b004      	add	sp, #16
 80063a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a6:	4835      	ldr	r0, [pc, #212]	; (800647c <_printf_i+0x244>)
 80063a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063ac:	6829      	ldr	r1, [r5, #0]
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80063b4:	6029      	str	r1, [r5, #0]
 80063b6:	061d      	lsls	r5, r3, #24
 80063b8:	d514      	bpl.n	80063e4 <_printf_i+0x1ac>
 80063ba:	07df      	lsls	r7, r3, #31
 80063bc:	bf44      	itt	mi
 80063be:	f043 0320 	orrmi.w	r3, r3, #32
 80063c2:	6023      	strmi	r3, [r4, #0]
 80063c4:	b91e      	cbnz	r6, 80063ce <_printf_i+0x196>
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	f023 0320 	bic.w	r3, r3, #32
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	2310      	movs	r3, #16
 80063d0:	e7b0      	b.n	8006334 <_printf_i+0xfc>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	f043 0320 	orr.w	r3, r3, #32
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	2378      	movs	r3, #120	; 0x78
 80063dc:	4828      	ldr	r0, [pc, #160]	; (8006480 <_printf_i+0x248>)
 80063de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063e2:	e7e3      	b.n	80063ac <_printf_i+0x174>
 80063e4:	0659      	lsls	r1, r3, #25
 80063e6:	bf48      	it	mi
 80063e8:	b2b6      	uxthmi	r6, r6
 80063ea:	e7e6      	b.n	80063ba <_printf_i+0x182>
 80063ec:	4615      	mov	r5, r2
 80063ee:	e7bb      	b.n	8006368 <_printf_i+0x130>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	6826      	ldr	r6, [r4, #0]
 80063f4:	6961      	ldr	r1, [r4, #20]
 80063f6:	1d18      	adds	r0, r3, #4
 80063f8:	6028      	str	r0, [r5, #0]
 80063fa:	0635      	lsls	r5, r6, #24
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	d501      	bpl.n	8006404 <_printf_i+0x1cc>
 8006400:	6019      	str	r1, [r3, #0]
 8006402:	e002      	b.n	800640a <_printf_i+0x1d2>
 8006404:	0670      	lsls	r0, r6, #25
 8006406:	d5fb      	bpl.n	8006400 <_printf_i+0x1c8>
 8006408:	8019      	strh	r1, [r3, #0]
 800640a:	2300      	movs	r3, #0
 800640c:	6123      	str	r3, [r4, #16]
 800640e:	4615      	mov	r5, r2
 8006410:	e7ba      	b.n	8006388 <_printf_i+0x150>
 8006412:	682b      	ldr	r3, [r5, #0]
 8006414:	1d1a      	adds	r2, r3, #4
 8006416:	602a      	str	r2, [r5, #0]
 8006418:	681d      	ldr	r5, [r3, #0]
 800641a:	6862      	ldr	r2, [r4, #4]
 800641c:	2100      	movs	r1, #0
 800641e:	4628      	mov	r0, r5
 8006420:	f7f9 fede 	bl	80001e0 <memchr>
 8006424:	b108      	cbz	r0, 800642a <_printf_i+0x1f2>
 8006426:	1b40      	subs	r0, r0, r5
 8006428:	6060      	str	r0, [r4, #4]
 800642a:	6863      	ldr	r3, [r4, #4]
 800642c:	6123      	str	r3, [r4, #16]
 800642e:	2300      	movs	r3, #0
 8006430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006434:	e7a8      	b.n	8006388 <_printf_i+0x150>
 8006436:	6923      	ldr	r3, [r4, #16]
 8006438:	462a      	mov	r2, r5
 800643a:	4649      	mov	r1, r9
 800643c:	4640      	mov	r0, r8
 800643e:	47d0      	blx	sl
 8006440:	3001      	adds	r0, #1
 8006442:	d0ab      	beq.n	800639c <_printf_i+0x164>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	079b      	lsls	r3, r3, #30
 8006448:	d413      	bmi.n	8006472 <_printf_i+0x23a>
 800644a:	68e0      	ldr	r0, [r4, #12]
 800644c:	9b03      	ldr	r3, [sp, #12]
 800644e:	4298      	cmp	r0, r3
 8006450:	bfb8      	it	lt
 8006452:	4618      	movlt	r0, r3
 8006454:	e7a4      	b.n	80063a0 <_printf_i+0x168>
 8006456:	2301      	movs	r3, #1
 8006458:	4632      	mov	r2, r6
 800645a:	4649      	mov	r1, r9
 800645c:	4640      	mov	r0, r8
 800645e:	47d0      	blx	sl
 8006460:	3001      	adds	r0, #1
 8006462:	d09b      	beq.n	800639c <_printf_i+0x164>
 8006464:	3501      	adds	r5, #1
 8006466:	68e3      	ldr	r3, [r4, #12]
 8006468:	9903      	ldr	r1, [sp, #12]
 800646a:	1a5b      	subs	r3, r3, r1
 800646c:	42ab      	cmp	r3, r5
 800646e:	dcf2      	bgt.n	8006456 <_printf_i+0x21e>
 8006470:	e7eb      	b.n	800644a <_printf_i+0x212>
 8006472:	2500      	movs	r5, #0
 8006474:	f104 0619 	add.w	r6, r4, #25
 8006478:	e7f5      	b.n	8006466 <_printf_i+0x22e>
 800647a:	bf00      	nop
 800647c:	0800761d 	.word	0x0800761d
 8006480:	0800762e 	.word	0x0800762e

08006484 <memcpy>:
 8006484:	440a      	add	r2, r1
 8006486:	4291      	cmp	r1, r2
 8006488:	f100 33ff 	add.w	r3, r0, #4294967295
 800648c:	d100      	bne.n	8006490 <memcpy+0xc>
 800648e:	4770      	bx	lr
 8006490:	b510      	push	{r4, lr}
 8006492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800649a:	4291      	cmp	r1, r2
 800649c:	d1f9      	bne.n	8006492 <memcpy+0xe>
 800649e:	bd10      	pop	{r4, pc}

080064a0 <memmove>:
 80064a0:	4288      	cmp	r0, r1
 80064a2:	b510      	push	{r4, lr}
 80064a4:	eb01 0402 	add.w	r4, r1, r2
 80064a8:	d902      	bls.n	80064b0 <memmove+0x10>
 80064aa:	4284      	cmp	r4, r0
 80064ac:	4623      	mov	r3, r4
 80064ae:	d807      	bhi.n	80064c0 <memmove+0x20>
 80064b0:	1e43      	subs	r3, r0, #1
 80064b2:	42a1      	cmp	r1, r4
 80064b4:	d008      	beq.n	80064c8 <memmove+0x28>
 80064b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064be:	e7f8      	b.n	80064b2 <memmove+0x12>
 80064c0:	4402      	add	r2, r0
 80064c2:	4601      	mov	r1, r0
 80064c4:	428a      	cmp	r2, r1
 80064c6:	d100      	bne.n	80064ca <memmove+0x2a>
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064d2:	e7f7      	b.n	80064c4 <memmove+0x24>

080064d4 <_free_r>:
 80064d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064d6:	2900      	cmp	r1, #0
 80064d8:	d044      	beq.n	8006564 <_free_r+0x90>
 80064da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064de:	9001      	str	r0, [sp, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f1a1 0404 	sub.w	r4, r1, #4
 80064e6:	bfb8      	it	lt
 80064e8:	18e4      	addlt	r4, r4, r3
 80064ea:	f000 f913 	bl	8006714 <__malloc_lock>
 80064ee:	4a1e      	ldr	r2, [pc, #120]	; (8006568 <_free_r+0x94>)
 80064f0:	9801      	ldr	r0, [sp, #4]
 80064f2:	6813      	ldr	r3, [r2, #0]
 80064f4:	b933      	cbnz	r3, 8006504 <_free_r+0x30>
 80064f6:	6063      	str	r3, [r4, #4]
 80064f8:	6014      	str	r4, [r2, #0]
 80064fa:	b003      	add	sp, #12
 80064fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006500:	f000 b90e 	b.w	8006720 <__malloc_unlock>
 8006504:	42a3      	cmp	r3, r4
 8006506:	d908      	bls.n	800651a <_free_r+0x46>
 8006508:	6825      	ldr	r5, [r4, #0]
 800650a:	1961      	adds	r1, r4, r5
 800650c:	428b      	cmp	r3, r1
 800650e:	bf01      	itttt	eq
 8006510:	6819      	ldreq	r1, [r3, #0]
 8006512:	685b      	ldreq	r3, [r3, #4]
 8006514:	1949      	addeq	r1, r1, r5
 8006516:	6021      	streq	r1, [r4, #0]
 8006518:	e7ed      	b.n	80064f6 <_free_r+0x22>
 800651a:	461a      	mov	r2, r3
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	b10b      	cbz	r3, 8006524 <_free_r+0x50>
 8006520:	42a3      	cmp	r3, r4
 8006522:	d9fa      	bls.n	800651a <_free_r+0x46>
 8006524:	6811      	ldr	r1, [r2, #0]
 8006526:	1855      	adds	r5, r2, r1
 8006528:	42a5      	cmp	r5, r4
 800652a:	d10b      	bne.n	8006544 <_free_r+0x70>
 800652c:	6824      	ldr	r4, [r4, #0]
 800652e:	4421      	add	r1, r4
 8006530:	1854      	adds	r4, r2, r1
 8006532:	42a3      	cmp	r3, r4
 8006534:	6011      	str	r1, [r2, #0]
 8006536:	d1e0      	bne.n	80064fa <_free_r+0x26>
 8006538:	681c      	ldr	r4, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	6053      	str	r3, [r2, #4]
 800653e:	4421      	add	r1, r4
 8006540:	6011      	str	r1, [r2, #0]
 8006542:	e7da      	b.n	80064fa <_free_r+0x26>
 8006544:	d902      	bls.n	800654c <_free_r+0x78>
 8006546:	230c      	movs	r3, #12
 8006548:	6003      	str	r3, [r0, #0]
 800654a:	e7d6      	b.n	80064fa <_free_r+0x26>
 800654c:	6825      	ldr	r5, [r4, #0]
 800654e:	1961      	adds	r1, r4, r5
 8006550:	428b      	cmp	r3, r1
 8006552:	bf04      	itt	eq
 8006554:	6819      	ldreq	r1, [r3, #0]
 8006556:	685b      	ldreq	r3, [r3, #4]
 8006558:	6063      	str	r3, [r4, #4]
 800655a:	bf04      	itt	eq
 800655c:	1949      	addeq	r1, r1, r5
 800655e:	6021      	streq	r1, [r4, #0]
 8006560:	6054      	str	r4, [r2, #4]
 8006562:	e7ca      	b.n	80064fa <_free_r+0x26>
 8006564:	b003      	add	sp, #12
 8006566:	bd30      	pop	{r4, r5, pc}
 8006568:	20000210 	.word	0x20000210

0800656c <sbrk_aligned>:
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	4e0e      	ldr	r6, [pc, #56]	; (80065a8 <sbrk_aligned+0x3c>)
 8006570:	460c      	mov	r4, r1
 8006572:	6831      	ldr	r1, [r6, #0]
 8006574:	4605      	mov	r5, r0
 8006576:	b911      	cbnz	r1, 800657e <sbrk_aligned+0x12>
 8006578:	f000 f8bc 	bl	80066f4 <_sbrk_r>
 800657c:	6030      	str	r0, [r6, #0]
 800657e:	4621      	mov	r1, r4
 8006580:	4628      	mov	r0, r5
 8006582:	f000 f8b7 	bl	80066f4 <_sbrk_r>
 8006586:	1c43      	adds	r3, r0, #1
 8006588:	d00a      	beq.n	80065a0 <sbrk_aligned+0x34>
 800658a:	1cc4      	adds	r4, r0, #3
 800658c:	f024 0403 	bic.w	r4, r4, #3
 8006590:	42a0      	cmp	r0, r4
 8006592:	d007      	beq.n	80065a4 <sbrk_aligned+0x38>
 8006594:	1a21      	subs	r1, r4, r0
 8006596:	4628      	mov	r0, r5
 8006598:	f000 f8ac 	bl	80066f4 <_sbrk_r>
 800659c:	3001      	adds	r0, #1
 800659e:	d101      	bne.n	80065a4 <sbrk_aligned+0x38>
 80065a0:	f04f 34ff 	mov.w	r4, #4294967295
 80065a4:	4620      	mov	r0, r4
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	20000214 	.word	0x20000214

080065ac <_malloc_r>:
 80065ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b0:	1ccd      	adds	r5, r1, #3
 80065b2:	f025 0503 	bic.w	r5, r5, #3
 80065b6:	3508      	adds	r5, #8
 80065b8:	2d0c      	cmp	r5, #12
 80065ba:	bf38      	it	cc
 80065bc:	250c      	movcc	r5, #12
 80065be:	2d00      	cmp	r5, #0
 80065c0:	4607      	mov	r7, r0
 80065c2:	db01      	blt.n	80065c8 <_malloc_r+0x1c>
 80065c4:	42a9      	cmp	r1, r5
 80065c6:	d905      	bls.n	80065d4 <_malloc_r+0x28>
 80065c8:	230c      	movs	r3, #12
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	2600      	movs	r6, #0
 80065ce:	4630      	mov	r0, r6
 80065d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d4:	4e2e      	ldr	r6, [pc, #184]	; (8006690 <_malloc_r+0xe4>)
 80065d6:	f000 f89d 	bl	8006714 <__malloc_lock>
 80065da:	6833      	ldr	r3, [r6, #0]
 80065dc:	461c      	mov	r4, r3
 80065de:	bb34      	cbnz	r4, 800662e <_malloc_r+0x82>
 80065e0:	4629      	mov	r1, r5
 80065e2:	4638      	mov	r0, r7
 80065e4:	f7ff ffc2 	bl	800656c <sbrk_aligned>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	4604      	mov	r4, r0
 80065ec:	d14d      	bne.n	800668a <_malloc_r+0xde>
 80065ee:	6834      	ldr	r4, [r6, #0]
 80065f0:	4626      	mov	r6, r4
 80065f2:	2e00      	cmp	r6, #0
 80065f4:	d140      	bne.n	8006678 <_malloc_r+0xcc>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	4631      	mov	r1, r6
 80065fa:	4638      	mov	r0, r7
 80065fc:	eb04 0803 	add.w	r8, r4, r3
 8006600:	f000 f878 	bl	80066f4 <_sbrk_r>
 8006604:	4580      	cmp	r8, r0
 8006606:	d13a      	bne.n	800667e <_malloc_r+0xd2>
 8006608:	6821      	ldr	r1, [r4, #0]
 800660a:	3503      	adds	r5, #3
 800660c:	1a6d      	subs	r5, r5, r1
 800660e:	f025 0503 	bic.w	r5, r5, #3
 8006612:	3508      	adds	r5, #8
 8006614:	2d0c      	cmp	r5, #12
 8006616:	bf38      	it	cc
 8006618:	250c      	movcc	r5, #12
 800661a:	4629      	mov	r1, r5
 800661c:	4638      	mov	r0, r7
 800661e:	f7ff ffa5 	bl	800656c <sbrk_aligned>
 8006622:	3001      	adds	r0, #1
 8006624:	d02b      	beq.n	800667e <_malloc_r+0xd2>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	442b      	add	r3, r5
 800662a:	6023      	str	r3, [r4, #0]
 800662c:	e00e      	b.n	800664c <_malloc_r+0xa0>
 800662e:	6822      	ldr	r2, [r4, #0]
 8006630:	1b52      	subs	r2, r2, r5
 8006632:	d41e      	bmi.n	8006672 <_malloc_r+0xc6>
 8006634:	2a0b      	cmp	r2, #11
 8006636:	d916      	bls.n	8006666 <_malloc_r+0xba>
 8006638:	1961      	adds	r1, r4, r5
 800663a:	42a3      	cmp	r3, r4
 800663c:	6025      	str	r5, [r4, #0]
 800663e:	bf18      	it	ne
 8006640:	6059      	strne	r1, [r3, #4]
 8006642:	6863      	ldr	r3, [r4, #4]
 8006644:	bf08      	it	eq
 8006646:	6031      	streq	r1, [r6, #0]
 8006648:	5162      	str	r2, [r4, r5]
 800664a:	604b      	str	r3, [r1, #4]
 800664c:	4638      	mov	r0, r7
 800664e:	f104 060b 	add.w	r6, r4, #11
 8006652:	f000 f865 	bl	8006720 <__malloc_unlock>
 8006656:	f026 0607 	bic.w	r6, r6, #7
 800665a:	1d23      	adds	r3, r4, #4
 800665c:	1af2      	subs	r2, r6, r3
 800665e:	d0b6      	beq.n	80065ce <_malloc_r+0x22>
 8006660:	1b9b      	subs	r3, r3, r6
 8006662:	50a3      	str	r3, [r4, r2]
 8006664:	e7b3      	b.n	80065ce <_malloc_r+0x22>
 8006666:	6862      	ldr	r2, [r4, #4]
 8006668:	42a3      	cmp	r3, r4
 800666a:	bf0c      	ite	eq
 800666c:	6032      	streq	r2, [r6, #0]
 800666e:	605a      	strne	r2, [r3, #4]
 8006670:	e7ec      	b.n	800664c <_malloc_r+0xa0>
 8006672:	4623      	mov	r3, r4
 8006674:	6864      	ldr	r4, [r4, #4]
 8006676:	e7b2      	b.n	80065de <_malloc_r+0x32>
 8006678:	4634      	mov	r4, r6
 800667a:	6876      	ldr	r6, [r6, #4]
 800667c:	e7b9      	b.n	80065f2 <_malloc_r+0x46>
 800667e:	230c      	movs	r3, #12
 8006680:	603b      	str	r3, [r7, #0]
 8006682:	4638      	mov	r0, r7
 8006684:	f000 f84c 	bl	8006720 <__malloc_unlock>
 8006688:	e7a1      	b.n	80065ce <_malloc_r+0x22>
 800668a:	6025      	str	r5, [r4, #0]
 800668c:	e7de      	b.n	800664c <_malloc_r+0xa0>
 800668e:	bf00      	nop
 8006690:	20000210 	.word	0x20000210

08006694 <_realloc_r>:
 8006694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006698:	4680      	mov	r8, r0
 800669a:	4614      	mov	r4, r2
 800669c:	460e      	mov	r6, r1
 800669e:	b921      	cbnz	r1, 80066aa <_realloc_r+0x16>
 80066a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066a4:	4611      	mov	r1, r2
 80066a6:	f7ff bf81 	b.w	80065ac <_malloc_r>
 80066aa:	b92a      	cbnz	r2, 80066b8 <_realloc_r+0x24>
 80066ac:	f7ff ff12 	bl	80064d4 <_free_r>
 80066b0:	4625      	mov	r5, r4
 80066b2:	4628      	mov	r0, r5
 80066b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b8:	f000 f838 	bl	800672c <_malloc_usable_size_r>
 80066bc:	4284      	cmp	r4, r0
 80066be:	4607      	mov	r7, r0
 80066c0:	d802      	bhi.n	80066c8 <_realloc_r+0x34>
 80066c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066c6:	d812      	bhi.n	80066ee <_realloc_r+0x5a>
 80066c8:	4621      	mov	r1, r4
 80066ca:	4640      	mov	r0, r8
 80066cc:	f7ff ff6e 	bl	80065ac <_malloc_r>
 80066d0:	4605      	mov	r5, r0
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d0ed      	beq.n	80066b2 <_realloc_r+0x1e>
 80066d6:	42bc      	cmp	r4, r7
 80066d8:	4622      	mov	r2, r4
 80066da:	4631      	mov	r1, r6
 80066dc:	bf28      	it	cs
 80066de:	463a      	movcs	r2, r7
 80066e0:	f7ff fed0 	bl	8006484 <memcpy>
 80066e4:	4631      	mov	r1, r6
 80066e6:	4640      	mov	r0, r8
 80066e8:	f7ff fef4 	bl	80064d4 <_free_r>
 80066ec:	e7e1      	b.n	80066b2 <_realloc_r+0x1e>
 80066ee:	4635      	mov	r5, r6
 80066f0:	e7df      	b.n	80066b2 <_realloc_r+0x1e>
	...

080066f4 <_sbrk_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	4d06      	ldr	r5, [pc, #24]	; (8006710 <_sbrk_r+0x1c>)
 80066f8:	2300      	movs	r3, #0
 80066fa:	4604      	mov	r4, r0
 80066fc:	4608      	mov	r0, r1
 80066fe:	602b      	str	r3, [r5, #0]
 8006700:	f7fb f854 	bl	80017ac <_sbrk>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_sbrk_r+0x1a>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_sbrk_r+0x1a>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	20000218 	.word	0x20000218

08006714 <__malloc_lock>:
 8006714:	4801      	ldr	r0, [pc, #4]	; (800671c <__malloc_lock+0x8>)
 8006716:	f000 b811 	b.w	800673c <__retarget_lock_acquire_recursive>
 800671a:	bf00      	nop
 800671c:	2000021c 	.word	0x2000021c

08006720 <__malloc_unlock>:
 8006720:	4801      	ldr	r0, [pc, #4]	; (8006728 <__malloc_unlock+0x8>)
 8006722:	f000 b80c 	b.w	800673e <__retarget_lock_release_recursive>
 8006726:	bf00      	nop
 8006728:	2000021c 	.word	0x2000021c

0800672c <_malloc_usable_size_r>:
 800672c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006730:	1f18      	subs	r0, r3, #4
 8006732:	2b00      	cmp	r3, #0
 8006734:	bfbc      	itt	lt
 8006736:	580b      	ldrlt	r3, [r1, r0]
 8006738:	18c0      	addlt	r0, r0, r3
 800673a:	4770      	bx	lr

0800673c <__retarget_lock_acquire_recursive>:
 800673c:	4770      	bx	lr

0800673e <__retarget_lock_release_recursive>:
 800673e:	4770      	bx	lr

08006740 <pow>:
 8006740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006742:	ed2d 8b02 	vpush	{d8}
 8006746:	eeb0 8a40 	vmov.f32	s16, s0
 800674a:	eef0 8a60 	vmov.f32	s17, s1
 800674e:	ec55 4b11 	vmov	r4, r5, d1
 8006752:	f000 f865 	bl	8006820 <__ieee754_pow>
 8006756:	4622      	mov	r2, r4
 8006758:	462b      	mov	r3, r5
 800675a:	4620      	mov	r0, r4
 800675c:	4629      	mov	r1, r5
 800675e:	ec57 6b10 	vmov	r6, r7, d0
 8006762:	f7fa f9e3 	bl	8000b2c <__aeabi_dcmpun>
 8006766:	2800      	cmp	r0, #0
 8006768:	d13b      	bne.n	80067e2 <pow+0xa2>
 800676a:	ec51 0b18 	vmov	r0, r1, d8
 800676e:	2200      	movs	r2, #0
 8006770:	2300      	movs	r3, #0
 8006772:	f7fa f9a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006776:	b1b8      	cbz	r0, 80067a8 <pow+0x68>
 8006778:	2200      	movs	r2, #0
 800677a:	2300      	movs	r3, #0
 800677c:	4620      	mov	r0, r4
 800677e:	4629      	mov	r1, r5
 8006780:	f7fa f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006784:	2800      	cmp	r0, #0
 8006786:	d146      	bne.n	8006816 <pow+0xd6>
 8006788:	ec45 4b10 	vmov	d0, r4, r5
 800678c:	f000 fe61 	bl	8007452 <finite>
 8006790:	b338      	cbz	r0, 80067e2 <pow+0xa2>
 8006792:	2200      	movs	r2, #0
 8006794:	2300      	movs	r3, #0
 8006796:	4620      	mov	r0, r4
 8006798:	4629      	mov	r1, r5
 800679a:	f7fa f99f 	bl	8000adc <__aeabi_dcmplt>
 800679e:	b300      	cbz	r0, 80067e2 <pow+0xa2>
 80067a0:	f7ff fb1a 	bl	8005dd8 <__errno>
 80067a4:	2322      	movs	r3, #34	; 0x22
 80067a6:	e01b      	b.n	80067e0 <pow+0xa0>
 80067a8:	ec47 6b10 	vmov	d0, r6, r7
 80067ac:	f000 fe51 	bl	8007452 <finite>
 80067b0:	b9e0      	cbnz	r0, 80067ec <pow+0xac>
 80067b2:	eeb0 0a48 	vmov.f32	s0, s16
 80067b6:	eef0 0a68 	vmov.f32	s1, s17
 80067ba:	f000 fe4a 	bl	8007452 <finite>
 80067be:	b1a8      	cbz	r0, 80067ec <pow+0xac>
 80067c0:	ec45 4b10 	vmov	d0, r4, r5
 80067c4:	f000 fe45 	bl	8007452 <finite>
 80067c8:	b180      	cbz	r0, 80067ec <pow+0xac>
 80067ca:	4632      	mov	r2, r6
 80067cc:	463b      	mov	r3, r7
 80067ce:	4630      	mov	r0, r6
 80067d0:	4639      	mov	r1, r7
 80067d2:	f7fa f9ab 	bl	8000b2c <__aeabi_dcmpun>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d0e2      	beq.n	80067a0 <pow+0x60>
 80067da:	f7ff fafd 	bl	8005dd8 <__errno>
 80067de:	2321      	movs	r3, #33	; 0x21
 80067e0:	6003      	str	r3, [r0, #0]
 80067e2:	ecbd 8b02 	vpop	{d8}
 80067e6:	ec47 6b10 	vmov	d0, r6, r7
 80067ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ec:	2200      	movs	r2, #0
 80067ee:	2300      	movs	r3, #0
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7fa f968 	bl	8000ac8 <__aeabi_dcmpeq>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d0f2      	beq.n	80067e2 <pow+0xa2>
 80067fc:	eeb0 0a48 	vmov.f32	s0, s16
 8006800:	eef0 0a68 	vmov.f32	s1, s17
 8006804:	f000 fe25 	bl	8007452 <finite>
 8006808:	2800      	cmp	r0, #0
 800680a:	d0ea      	beq.n	80067e2 <pow+0xa2>
 800680c:	ec45 4b10 	vmov	d0, r4, r5
 8006810:	f000 fe1f 	bl	8007452 <finite>
 8006814:	e7c3      	b.n	800679e <pow+0x5e>
 8006816:	4f01      	ldr	r7, [pc, #4]	; (800681c <pow+0xdc>)
 8006818:	2600      	movs	r6, #0
 800681a:	e7e2      	b.n	80067e2 <pow+0xa2>
 800681c:	3ff00000 	.word	0x3ff00000

08006820 <__ieee754_pow>:
 8006820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006824:	ed2d 8b06 	vpush	{d8-d10}
 8006828:	b089      	sub	sp, #36	; 0x24
 800682a:	ed8d 1b00 	vstr	d1, [sp]
 800682e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006832:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006836:	ea58 0102 	orrs.w	r1, r8, r2
 800683a:	ec57 6b10 	vmov	r6, r7, d0
 800683e:	d115      	bne.n	800686c <__ieee754_pow+0x4c>
 8006840:	19b3      	adds	r3, r6, r6
 8006842:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006846:	4152      	adcs	r2, r2
 8006848:	4299      	cmp	r1, r3
 800684a:	4b89      	ldr	r3, [pc, #548]	; (8006a70 <__ieee754_pow+0x250>)
 800684c:	4193      	sbcs	r3, r2
 800684e:	f080 84d2 	bcs.w	80071f6 <__ieee754_pow+0x9d6>
 8006852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006856:	4630      	mov	r0, r6
 8006858:	4639      	mov	r1, r7
 800685a:	f7f9 fd17 	bl	800028c <__adddf3>
 800685e:	ec41 0b10 	vmov	d0, r0, r1
 8006862:	b009      	add	sp, #36	; 0x24
 8006864:	ecbd 8b06 	vpop	{d8-d10}
 8006868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686c:	4b81      	ldr	r3, [pc, #516]	; (8006a74 <__ieee754_pow+0x254>)
 800686e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006872:	429c      	cmp	r4, r3
 8006874:	ee10 aa10 	vmov	sl, s0
 8006878:	463d      	mov	r5, r7
 800687a:	dc06      	bgt.n	800688a <__ieee754_pow+0x6a>
 800687c:	d101      	bne.n	8006882 <__ieee754_pow+0x62>
 800687e:	2e00      	cmp	r6, #0
 8006880:	d1e7      	bne.n	8006852 <__ieee754_pow+0x32>
 8006882:	4598      	cmp	r8, r3
 8006884:	dc01      	bgt.n	800688a <__ieee754_pow+0x6a>
 8006886:	d10f      	bne.n	80068a8 <__ieee754_pow+0x88>
 8006888:	b172      	cbz	r2, 80068a8 <__ieee754_pow+0x88>
 800688a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800688e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006892:	ea55 050a 	orrs.w	r5, r5, sl
 8006896:	d1dc      	bne.n	8006852 <__ieee754_pow+0x32>
 8006898:	e9dd 3200 	ldrd	r3, r2, [sp]
 800689c:	18db      	adds	r3, r3, r3
 800689e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80068a2:	4152      	adcs	r2, r2
 80068a4:	429d      	cmp	r5, r3
 80068a6:	e7d0      	b.n	800684a <__ieee754_pow+0x2a>
 80068a8:	2d00      	cmp	r5, #0
 80068aa:	da3b      	bge.n	8006924 <__ieee754_pow+0x104>
 80068ac:	4b72      	ldr	r3, [pc, #456]	; (8006a78 <__ieee754_pow+0x258>)
 80068ae:	4598      	cmp	r8, r3
 80068b0:	dc51      	bgt.n	8006956 <__ieee754_pow+0x136>
 80068b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80068b6:	4598      	cmp	r8, r3
 80068b8:	f340 84ac 	ble.w	8007214 <__ieee754_pow+0x9f4>
 80068bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80068c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80068c4:	2b14      	cmp	r3, #20
 80068c6:	dd0f      	ble.n	80068e8 <__ieee754_pow+0xc8>
 80068c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80068cc:	fa22 f103 	lsr.w	r1, r2, r3
 80068d0:	fa01 f303 	lsl.w	r3, r1, r3
 80068d4:	4293      	cmp	r3, r2
 80068d6:	f040 849d 	bne.w	8007214 <__ieee754_pow+0x9f4>
 80068da:	f001 0101 	and.w	r1, r1, #1
 80068de:	f1c1 0302 	rsb	r3, r1, #2
 80068e2:	9304      	str	r3, [sp, #16]
 80068e4:	b182      	cbz	r2, 8006908 <__ieee754_pow+0xe8>
 80068e6:	e05f      	b.n	80069a8 <__ieee754_pow+0x188>
 80068e8:	2a00      	cmp	r2, #0
 80068ea:	d15b      	bne.n	80069a4 <__ieee754_pow+0x184>
 80068ec:	f1c3 0314 	rsb	r3, r3, #20
 80068f0:	fa48 f103 	asr.w	r1, r8, r3
 80068f4:	fa01 f303 	lsl.w	r3, r1, r3
 80068f8:	4543      	cmp	r3, r8
 80068fa:	f040 8488 	bne.w	800720e <__ieee754_pow+0x9ee>
 80068fe:	f001 0101 	and.w	r1, r1, #1
 8006902:	f1c1 0302 	rsb	r3, r1, #2
 8006906:	9304      	str	r3, [sp, #16]
 8006908:	4b5c      	ldr	r3, [pc, #368]	; (8006a7c <__ieee754_pow+0x25c>)
 800690a:	4598      	cmp	r8, r3
 800690c:	d132      	bne.n	8006974 <__ieee754_pow+0x154>
 800690e:	f1b9 0f00 	cmp.w	r9, #0
 8006912:	f280 8478 	bge.w	8007206 <__ieee754_pow+0x9e6>
 8006916:	4959      	ldr	r1, [pc, #356]	; (8006a7c <__ieee754_pow+0x25c>)
 8006918:	4632      	mov	r2, r6
 800691a:	463b      	mov	r3, r7
 800691c:	2000      	movs	r0, #0
 800691e:	f7f9 ff95 	bl	800084c <__aeabi_ddiv>
 8006922:	e79c      	b.n	800685e <__ieee754_pow+0x3e>
 8006924:	2300      	movs	r3, #0
 8006926:	9304      	str	r3, [sp, #16]
 8006928:	2a00      	cmp	r2, #0
 800692a:	d13d      	bne.n	80069a8 <__ieee754_pow+0x188>
 800692c:	4b51      	ldr	r3, [pc, #324]	; (8006a74 <__ieee754_pow+0x254>)
 800692e:	4598      	cmp	r8, r3
 8006930:	d1ea      	bne.n	8006908 <__ieee754_pow+0xe8>
 8006932:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006936:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800693a:	ea53 030a 	orrs.w	r3, r3, sl
 800693e:	f000 845a 	beq.w	80071f6 <__ieee754_pow+0x9d6>
 8006942:	4b4f      	ldr	r3, [pc, #316]	; (8006a80 <__ieee754_pow+0x260>)
 8006944:	429c      	cmp	r4, r3
 8006946:	dd08      	ble.n	800695a <__ieee754_pow+0x13a>
 8006948:	f1b9 0f00 	cmp.w	r9, #0
 800694c:	f2c0 8457 	blt.w	80071fe <__ieee754_pow+0x9de>
 8006950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006954:	e783      	b.n	800685e <__ieee754_pow+0x3e>
 8006956:	2302      	movs	r3, #2
 8006958:	e7e5      	b.n	8006926 <__ieee754_pow+0x106>
 800695a:	f1b9 0f00 	cmp.w	r9, #0
 800695e:	f04f 0000 	mov.w	r0, #0
 8006962:	f04f 0100 	mov.w	r1, #0
 8006966:	f6bf af7a 	bge.w	800685e <__ieee754_pow+0x3e>
 800696a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800696e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006972:	e774      	b.n	800685e <__ieee754_pow+0x3e>
 8006974:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006978:	d106      	bne.n	8006988 <__ieee754_pow+0x168>
 800697a:	4632      	mov	r2, r6
 800697c:	463b      	mov	r3, r7
 800697e:	4630      	mov	r0, r6
 8006980:	4639      	mov	r1, r7
 8006982:	f7f9 fe39 	bl	80005f8 <__aeabi_dmul>
 8006986:	e76a      	b.n	800685e <__ieee754_pow+0x3e>
 8006988:	4b3e      	ldr	r3, [pc, #248]	; (8006a84 <__ieee754_pow+0x264>)
 800698a:	4599      	cmp	r9, r3
 800698c:	d10c      	bne.n	80069a8 <__ieee754_pow+0x188>
 800698e:	2d00      	cmp	r5, #0
 8006990:	db0a      	blt.n	80069a8 <__ieee754_pow+0x188>
 8006992:	ec47 6b10 	vmov	d0, r6, r7
 8006996:	b009      	add	sp, #36	; 0x24
 8006998:	ecbd 8b06 	vpop	{d8-d10}
 800699c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	f000 bc6c 	b.w	800727c <__ieee754_sqrt>
 80069a4:	2300      	movs	r3, #0
 80069a6:	9304      	str	r3, [sp, #16]
 80069a8:	ec47 6b10 	vmov	d0, r6, r7
 80069ac:	f000 fd48 	bl	8007440 <fabs>
 80069b0:	ec51 0b10 	vmov	r0, r1, d0
 80069b4:	f1ba 0f00 	cmp.w	sl, #0
 80069b8:	d129      	bne.n	8006a0e <__ieee754_pow+0x1ee>
 80069ba:	b124      	cbz	r4, 80069c6 <__ieee754_pow+0x1a6>
 80069bc:	4b2f      	ldr	r3, [pc, #188]	; (8006a7c <__ieee754_pow+0x25c>)
 80069be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d123      	bne.n	8006a0e <__ieee754_pow+0x1ee>
 80069c6:	f1b9 0f00 	cmp.w	r9, #0
 80069ca:	da05      	bge.n	80069d8 <__ieee754_pow+0x1b8>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	2000      	movs	r0, #0
 80069d2:	492a      	ldr	r1, [pc, #168]	; (8006a7c <__ieee754_pow+0x25c>)
 80069d4:	f7f9 ff3a 	bl	800084c <__aeabi_ddiv>
 80069d8:	2d00      	cmp	r5, #0
 80069da:	f6bf af40 	bge.w	800685e <__ieee754_pow+0x3e>
 80069de:	9b04      	ldr	r3, [sp, #16]
 80069e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80069e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80069e8:	4323      	orrs	r3, r4
 80069ea:	d108      	bne.n	80069fe <__ieee754_pow+0x1de>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4610      	mov	r0, r2
 80069f2:	4619      	mov	r1, r3
 80069f4:	f7f9 fc48 	bl	8000288 <__aeabi_dsub>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	e78f      	b.n	800691e <__ieee754_pow+0xfe>
 80069fe:	9b04      	ldr	r3, [sp, #16]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	f47f af2c 	bne.w	800685e <__ieee754_pow+0x3e>
 8006a06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	e727      	b.n	800685e <__ieee754_pow+0x3e>
 8006a0e:	0feb      	lsrs	r3, r5, #31
 8006a10:	3b01      	subs	r3, #1
 8006a12:	9306      	str	r3, [sp, #24]
 8006a14:	9a06      	ldr	r2, [sp, #24]
 8006a16:	9b04      	ldr	r3, [sp, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	d102      	bne.n	8006a22 <__ieee754_pow+0x202>
 8006a1c:	4632      	mov	r2, r6
 8006a1e:	463b      	mov	r3, r7
 8006a20:	e7e6      	b.n	80069f0 <__ieee754_pow+0x1d0>
 8006a22:	4b19      	ldr	r3, [pc, #100]	; (8006a88 <__ieee754_pow+0x268>)
 8006a24:	4598      	cmp	r8, r3
 8006a26:	f340 80fb 	ble.w	8006c20 <__ieee754_pow+0x400>
 8006a2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006a2e:	4598      	cmp	r8, r3
 8006a30:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <__ieee754_pow+0x260>)
 8006a32:	dd0c      	ble.n	8006a4e <__ieee754_pow+0x22e>
 8006a34:	429c      	cmp	r4, r3
 8006a36:	dc0f      	bgt.n	8006a58 <__ieee754_pow+0x238>
 8006a38:	f1b9 0f00 	cmp.w	r9, #0
 8006a3c:	da0f      	bge.n	8006a5e <__ieee754_pow+0x23e>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	b009      	add	sp, #36	; 0x24
 8006a42:	ecbd 8b06 	vpop	{d8-d10}
 8006a46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4a:	f000 bcf0 	b.w	800742e <__math_oflow>
 8006a4e:	429c      	cmp	r4, r3
 8006a50:	dbf2      	blt.n	8006a38 <__ieee754_pow+0x218>
 8006a52:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <__ieee754_pow+0x25c>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	dd19      	ble.n	8006a8c <__ieee754_pow+0x26c>
 8006a58:	f1b9 0f00 	cmp.w	r9, #0
 8006a5c:	dcef      	bgt.n	8006a3e <__ieee754_pow+0x21e>
 8006a5e:	2000      	movs	r0, #0
 8006a60:	b009      	add	sp, #36	; 0x24
 8006a62:	ecbd 8b06 	vpop	{d8-d10}
 8006a66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6a:	f000 bcd7 	b.w	800741c <__math_uflow>
 8006a6e:	bf00      	nop
 8006a70:	fff00000 	.word	0xfff00000
 8006a74:	7ff00000 	.word	0x7ff00000
 8006a78:	433fffff 	.word	0x433fffff
 8006a7c:	3ff00000 	.word	0x3ff00000
 8006a80:	3fefffff 	.word	0x3fefffff
 8006a84:	3fe00000 	.word	0x3fe00000
 8006a88:	41e00000 	.word	0x41e00000
 8006a8c:	4b60      	ldr	r3, [pc, #384]	; (8006c10 <__ieee754_pow+0x3f0>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f7f9 fbfa 	bl	8000288 <__aeabi_dsub>
 8006a94:	a354      	add	r3, pc, #336	; (adr r3, 8006be8 <__ieee754_pow+0x3c8>)
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	460d      	mov	r5, r1
 8006a9e:	f7f9 fdab 	bl	80005f8 <__aeabi_dmul>
 8006aa2:	a353      	add	r3, pc, #332	; (adr r3, 8006bf0 <__ieee754_pow+0x3d0>)
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	460f      	mov	r7, r1
 8006aac:	4620      	mov	r0, r4
 8006aae:	4629      	mov	r1, r5
 8006ab0:	f7f9 fda2 	bl	80005f8 <__aeabi_dmul>
 8006ab4:	4b57      	ldr	r3, [pc, #348]	; (8006c14 <__ieee754_pow+0x3f4>)
 8006ab6:	4682      	mov	sl, r0
 8006ab8:	468b      	mov	fp, r1
 8006aba:	2200      	movs	r2, #0
 8006abc:	4620      	mov	r0, r4
 8006abe:	4629      	mov	r1, r5
 8006ac0:	f7f9 fd9a 	bl	80005f8 <__aeabi_dmul>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	a14b      	add	r1, pc, #300	; (adr r1, 8006bf8 <__ieee754_pow+0x3d8>)
 8006aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ace:	f7f9 fbdb 	bl	8000288 <__aeabi_dsub>
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	f7f9 fd8f 	bl	80005f8 <__aeabi_dmul>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	2000      	movs	r0, #0
 8006ae0:	494d      	ldr	r1, [pc, #308]	; (8006c18 <__ieee754_pow+0x3f8>)
 8006ae2:	f7f9 fbd1 	bl	8000288 <__aeabi_dsub>
 8006ae6:	4622      	mov	r2, r4
 8006ae8:	4680      	mov	r8, r0
 8006aea:	4689      	mov	r9, r1
 8006aec:	462b      	mov	r3, r5
 8006aee:	4620      	mov	r0, r4
 8006af0:	4629      	mov	r1, r5
 8006af2:	f7f9 fd81 	bl	80005f8 <__aeabi_dmul>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4640      	mov	r0, r8
 8006afc:	4649      	mov	r1, r9
 8006afe:	f7f9 fd7b 	bl	80005f8 <__aeabi_dmul>
 8006b02:	a33f      	add	r3, pc, #252	; (adr r3, 8006c00 <__ieee754_pow+0x3e0>)
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f7f9 fd76 	bl	80005f8 <__aeabi_dmul>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4650      	mov	r0, sl
 8006b12:	4659      	mov	r1, fp
 8006b14:	f7f9 fbb8 	bl	8000288 <__aeabi_dsub>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4680      	mov	r8, r0
 8006b1e:	4689      	mov	r9, r1
 8006b20:	4630      	mov	r0, r6
 8006b22:	4639      	mov	r1, r7
 8006b24:	f7f9 fbb2 	bl	800028c <__adddf3>
 8006b28:	2000      	movs	r0, #0
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	4604      	mov	r4, r0
 8006b30:	460d      	mov	r5, r1
 8006b32:	f7f9 fba9 	bl	8000288 <__aeabi_dsub>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	f7f9 fba3 	bl	8000288 <__aeabi_dsub>
 8006b42:	9b04      	ldr	r3, [sp, #16]
 8006b44:	9a06      	ldr	r2, [sp, #24]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	4682      	mov	sl, r0
 8006b4c:	468b      	mov	fp, r1
 8006b4e:	f040 81e7 	bne.w	8006f20 <__ieee754_pow+0x700>
 8006b52:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006c08 <__ieee754_pow+0x3e8>
 8006b56:	eeb0 8a47 	vmov.f32	s16, s14
 8006b5a:	eef0 8a67 	vmov.f32	s17, s15
 8006b5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006b62:	2600      	movs	r6, #0
 8006b64:	4632      	mov	r2, r6
 8006b66:	463b      	mov	r3, r7
 8006b68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b6c:	f7f9 fb8c 	bl	8000288 <__aeabi_dsub>
 8006b70:	4622      	mov	r2, r4
 8006b72:	462b      	mov	r3, r5
 8006b74:	f7f9 fd40 	bl	80005f8 <__aeabi_dmul>
 8006b78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	4689      	mov	r9, r1
 8006b80:	4650      	mov	r0, sl
 8006b82:	4659      	mov	r1, fp
 8006b84:	f7f9 fd38 	bl	80005f8 <__aeabi_dmul>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4640      	mov	r0, r8
 8006b8e:	4649      	mov	r1, r9
 8006b90:	f7f9 fb7c 	bl	800028c <__adddf3>
 8006b94:	4632      	mov	r2, r6
 8006b96:	463b      	mov	r3, r7
 8006b98:	4680      	mov	r8, r0
 8006b9a:	4689      	mov	r9, r1
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	f7f9 fd2a 	bl	80005f8 <__aeabi_dmul>
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	460d      	mov	r5, r1
 8006baa:	4602      	mov	r2, r0
 8006bac:	4649      	mov	r1, r9
 8006bae:	4640      	mov	r0, r8
 8006bb0:	f7f9 fb6c 	bl	800028c <__adddf3>
 8006bb4:	4b19      	ldr	r3, [pc, #100]	; (8006c1c <__ieee754_pow+0x3fc>)
 8006bb6:	4299      	cmp	r1, r3
 8006bb8:	ec45 4b19 	vmov	d9, r4, r5
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	460f      	mov	r7, r1
 8006bc0:	468b      	mov	fp, r1
 8006bc2:	f340 82f1 	ble.w	80071a8 <__ieee754_pow+0x988>
 8006bc6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006bca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006bce:	4303      	orrs	r3, r0
 8006bd0:	f000 81e4 	beq.w	8006f9c <__ieee754_pow+0x77c>
 8006bd4:	ec51 0b18 	vmov	r0, r1, d8
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f7f9 ff7e 	bl	8000adc <__aeabi_dcmplt>
 8006be0:	3800      	subs	r0, #0
 8006be2:	bf18      	it	ne
 8006be4:	2001      	movne	r0, #1
 8006be6:	e72b      	b.n	8006a40 <__ieee754_pow+0x220>
 8006be8:	60000000 	.word	0x60000000
 8006bec:	3ff71547 	.word	0x3ff71547
 8006bf0:	f85ddf44 	.word	0xf85ddf44
 8006bf4:	3e54ae0b 	.word	0x3e54ae0b
 8006bf8:	55555555 	.word	0x55555555
 8006bfc:	3fd55555 	.word	0x3fd55555
 8006c00:	652b82fe 	.word	0x652b82fe
 8006c04:	3ff71547 	.word	0x3ff71547
 8006c08:	00000000 	.word	0x00000000
 8006c0c:	bff00000 	.word	0xbff00000
 8006c10:	3ff00000 	.word	0x3ff00000
 8006c14:	3fd00000 	.word	0x3fd00000
 8006c18:	3fe00000 	.word	0x3fe00000
 8006c1c:	408fffff 	.word	0x408fffff
 8006c20:	4bd5      	ldr	r3, [pc, #852]	; (8006f78 <__ieee754_pow+0x758>)
 8006c22:	402b      	ands	r3, r5
 8006c24:	2200      	movs	r2, #0
 8006c26:	b92b      	cbnz	r3, 8006c34 <__ieee754_pow+0x414>
 8006c28:	4bd4      	ldr	r3, [pc, #848]	; (8006f7c <__ieee754_pow+0x75c>)
 8006c2a:	f7f9 fce5 	bl	80005f8 <__aeabi_dmul>
 8006c2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006c32:	460c      	mov	r4, r1
 8006c34:	1523      	asrs	r3, r4, #20
 8006c36:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006c3a:	4413      	add	r3, r2
 8006c3c:	9305      	str	r3, [sp, #20]
 8006c3e:	4bd0      	ldr	r3, [pc, #832]	; (8006f80 <__ieee754_pow+0x760>)
 8006c40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006c44:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006c48:	429c      	cmp	r4, r3
 8006c4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006c4e:	dd08      	ble.n	8006c62 <__ieee754_pow+0x442>
 8006c50:	4bcc      	ldr	r3, [pc, #816]	; (8006f84 <__ieee754_pow+0x764>)
 8006c52:	429c      	cmp	r4, r3
 8006c54:	f340 8162 	ble.w	8006f1c <__ieee754_pow+0x6fc>
 8006c58:	9b05      	ldr	r3, [sp, #20]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	9305      	str	r3, [sp, #20]
 8006c5e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006c62:	2400      	movs	r4, #0
 8006c64:	00e3      	lsls	r3, r4, #3
 8006c66:	9307      	str	r3, [sp, #28]
 8006c68:	4bc7      	ldr	r3, [pc, #796]	; (8006f88 <__ieee754_pow+0x768>)
 8006c6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c6e:	ed93 7b00 	vldr	d7, [r3]
 8006c72:	4629      	mov	r1, r5
 8006c74:	ec53 2b17 	vmov	r2, r3, d7
 8006c78:	eeb0 9a47 	vmov.f32	s18, s14
 8006c7c:	eef0 9a67 	vmov.f32	s19, s15
 8006c80:	4682      	mov	sl, r0
 8006c82:	f7f9 fb01 	bl	8000288 <__aeabi_dsub>
 8006c86:	4652      	mov	r2, sl
 8006c88:	4606      	mov	r6, r0
 8006c8a:	460f      	mov	r7, r1
 8006c8c:	462b      	mov	r3, r5
 8006c8e:	ec51 0b19 	vmov	r0, r1, d9
 8006c92:	f7f9 fafb 	bl	800028c <__adddf3>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	49bb      	ldr	r1, [pc, #748]	; (8006f8c <__ieee754_pow+0x76c>)
 8006c9e:	f7f9 fdd5 	bl	800084c <__aeabi_ddiv>
 8006ca2:	ec41 0b1a 	vmov	d10, r0, r1
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 fca3 	bl	80005f8 <__aeabi_dmul>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb8:	9302      	str	r3, [sp, #8]
 8006cba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006cbe:	46ab      	mov	fp, r5
 8006cc0:	106d      	asrs	r5, r5, #1
 8006cc2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006cc6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006cca:	ec41 0b18 	vmov	d8, r0, r1
 8006cce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	4614      	mov	r4, r2
 8006cda:	461d      	mov	r5, r3
 8006cdc:	f7f9 fc8c 	bl	80005f8 <__aeabi_dmul>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	f7f9 face 	bl	8000288 <__aeabi_dsub>
 8006cec:	ec53 2b19 	vmov	r2, r3, d9
 8006cf0:	4606      	mov	r6, r0
 8006cf2:	460f      	mov	r7, r1
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	f7f9 fac6 	bl	8000288 <__aeabi_dsub>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4650      	mov	r0, sl
 8006d02:	4659      	mov	r1, fp
 8006d04:	f7f9 fac0 	bl	8000288 <__aeabi_dsub>
 8006d08:	4642      	mov	r2, r8
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	f7f9 fc74 	bl	80005f8 <__aeabi_dmul>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4630      	mov	r0, r6
 8006d16:	4639      	mov	r1, r7
 8006d18:	f7f9 fab6 	bl	8000288 <__aeabi_dsub>
 8006d1c:	ec53 2b1a 	vmov	r2, r3, d10
 8006d20:	f7f9 fc6a 	bl	80005f8 <__aeabi_dmul>
 8006d24:	ec53 2b18 	vmov	r2, r3, d8
 8006d28:	ec41 0b19 	vmov	d9, r0, r1
 8006d2c:	ec51 0b18 	vmov	r0, r1, d8
 8006d30:	f7f9 fc62 	bl	80005f8 <__aeabi_dmul>
 8006d34:	a37c      	add	r3, pc, #496	; (adr r3, 8006f28 <__ieee754_pow+0x708>)
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	460d      	mov	r5, r1
 8006d3e:	f7f9 fc5b 	bl	80005f8 <__aeabi_dmul>
 8006d42:	a37b      	add	r3, pc, #492	; (adr r3, 8006f30 <__ieee754_pow+0x710>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f7f9 faa0 	bl	800028c <__adddf3>
 8006d4c:	4622      	mov	r2, r4
 8006d4e:	462b      	mov	r3, r5
 8006d50:	f7f9 fc52 	bl	80005f8 <__aeabi_dmul>
 8006d54:	a378      	add	r3, pc, #480	; (adr r3, 8006f38 <__ieee754_pow+0x718>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f7f9 fa97 	bl	800028c <__adddf3>
 8006d5e:	4622      	mov	r2, r4
 8006d60:	462b      	mov	r3, r5
 8006d62:	f7f9 fc49 	bl	80005f8 <__aeabi_dmul>
 8006d66:	a376      	add	r3, pc, #472	; (adr r3, 8006f40 <__ieee754_pow+0x720>)
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f7f9 fa8e 	bl	800028c <__adddf3>
 8006d70:	4622      	mov	r2, r4
 8006d72:	462b      	mov	r3, r5
 8006d74:	f7f9 fc40 	bl	80005f8 <__aeabi_dmul>
 8006d78:	a373      	add	r3, pc, #460	; (adr r3, 8006f48 <__ieee754_pow+0x728>)
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f7f9 fa85 	bl	800028c <__adddf3>
 8006d82:	4622      	mov	r2, r4
 8006d84:	462b      	mov	r3, r5
 8006d86:	f7f9 fc37 	bl	80005f8 <__aeabi_dmul>
 8006d8a:	a371      	add	r3, pc, #452	; (adr r3, 8006f50 <__ieee754_pow+0x730>)
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	f7f9 fa7c 	bl	800028c <__adddf3>
 8006d94:	4622      	mov	r2, r4
 8006d96:	4606      	mov	r6, r0
 8006d98:	460f      	mov	r7, r1
 8006d9a:	462b      	mov	r3, r5
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7f9 fc2a 	bl	80005f8 <__aeabi_dmul>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4630      	mov	r0, r6
 8006daa:	4639      	mov	r1, r7
 8006dac:	f7f9 fc24 	bl	80005f8 <__aeabi_dmul>
 8006db0:	4642      	mov	r2, r8
 8006db2:	4604      	mov	r4, r0
 8006db4:	460d      	mov	r5, r1
 8006db6:	464b      	mov	r3, r9
 8006db8:	ec51 0b18 	vmov	r0, r1, d8
 8006dbc:	f7f9 fa66 	bl	800028c <__adddf3>
 8006dc0:	ec53 2b19 	vmov	r2, r3, d9
 8006dc4:	f7f9 fc18 	bl	80005f8 <__aeabi_dmul>
 8006dc8:	4622      	mov	r2, r4
 8006dca:	462b      	mov	r3, r5
 8006dcc:	f7f9 fa5e 	bl	800028c <__adddf3>
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	4682      	mov	sl, r0
 8006dd4:	468b      	mov	fp, r1
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	4640      	mov	r0, r8
 8006dda:	4649      	mov	r1, r9
 8006ddc:	f7f9 fc0c 	bl	80005f8 <__aeabi_dmul>
 8006de0:	4b6b      	ldr	r3, [pc, #428]	; (8006f90 <__ieee754_pow+0x770>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	4606      	mov	r6, r0
 8006de6:	460f      	mov	r7, r1
 8006de8:	f7f9 fa50 	bl	800028c <__adddf3>
 8006dec:	4652      	mov	r2, sl
 8006dee:	465b      	mov	r3, fp
 8006df0:	f7f9 fa4c 	bl	800028c <__adddf3>
 8006df4:	2000      	movs	r0, #0
 8006df6:	4604      	mov	r4, r0
 8006df8:	460d      	mov	r5, r1
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4640      	mov	r0, r8
 8006e00:	4649      	mov	r1, r9
 8006e02:	f7f9 fbf9 	bl	80005f8 <__aeabi_dmul>
 8006e06:	4b62      	ldr	r3, [pc, #392]	; (8006f90 <__ieee754_pow+0x770>)
 8006e08:	4680      	mov	r8, r0
 8006e0a:	4689      	mov	r9, r1
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4620      	mov	r0, r4
 8006e10:	4629      	mov	r1, r5
 8006e12:	f7f9 fa39 	bl	8000288 <__aeabi_dsub>
 8006e16:	4632      	mov	r2, r6
 8006e18:	463b      	mov	r3, r7
 8006e1a:	f7f9 fa35 	bl	8000288 <__aeabi_dsub>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4650      	mov	r0, sl
 8006e24:	4659      	mov	r1, fp
 8006e26:	f7f9 fa2f 	bl	8000288 <__aeabi_dsub>
 8006e2a:	ec53 2b18 	vmov	r2, r3, d8
 8006e2e:	f7f9 fbe3 	bl	80005f8 <__aeabi_dmul>
 8006e32:	4622      	mov	r2, r4
 8006e34:	4606      	mov	r6, r0
 8006e36:	460f      	mov	r7, r1
 8006e38:	462b      	mov	r3, r5
 8006e3a:	ec51 0b19 	vmov	r0, r1, d9
 8006e3e:	f7f9 fbdb 	bl	80005f8 <__aeabi_dmul>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	4630      	mov	r0, r6
 8006e48:	4639      	mov	r1, r7
 8006e4a:	f7f9 fa1f 	bl	800028c <__adddf3>
 8006e4e:	4606      	mov	r6, r0
 8006e50:	460f      	mov	r7, r1
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	4640      	mov	r0, r8
 8006e58:	4649      	mov	r1, r9
 8006e5a:	f7f9 fa17 	bl	800028c <__adddf3>
 8006e5e:	a33e      	add	r3, pc, #248	; (adr r3, 8006f58 <__ieee754_pow+0x738>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	2000      	movs	r0, #0
 8006e66:	4604      	mov	r4, r0
 8006e68:	460d      	mov	r5, r1
 8006e6a:	f7f9 fbc5 	bl	80005f8 <__aeabi_dmul>
 8006e6e:	4642      	mov	r2, r8
 8006e70:	ec41 0b18 	vmov	d8, r0, r1
 8006e74:	464b      	mov	r3, r9
 8006e76:	4620      	mov	r0, r4
 8006e78:	4629      	mov	r1, r5
 8006e7a:	f7f9 fa05 	bl	8000288 <__aeabi_dsub>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4630      	mov	r0, r6
 8006e84:	4639      	mov	r1, r7
 8006e86:	f7f9 f9ff 	bl	8000288 <__aeabi_dsub>
 8006e8a:	a335      	add	r3, pc, #212	; (adr r3, 8006f60 <__ieee754_pow+0x740>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f7f9 fbb2 	bl	80005f8 <__aeabi_dmul>
 8006e94:	a334      	add	r3, pc, #208	; (adr r3, 8006f68 <__ieee754_pow+0x748>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	460f      	mov	r7, r1
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	f7f9 fba9 	bl	80005f8 <__aeabi_dmul>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4630      	mov	r0, r6
 8006eac:	4639      	mov	r1, r7
 8006eae:	f7f9 f9ed 	bl	800028c <__adddf3>
 8006eb2:	9a07      	ldr	r2, [sp, #28]
 8006eb4:	4b37      	ldr	r3, [pc, #220]	; (8006f94 <__ieee754_pow+0x774>)
 8006eb6:	4413      	add	r3, r2
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f7f9 f9e6 	bl	800028c <__adddf3>
 8006ec0:	4682      	mov	sl, r0
 8006ec2:	9805      	ldr	r0, [sp, #20]
 8006ec4:	468b      	mov	fp, r1
 8006ec6:	f7f9 fb2d 	bl	8000524 <__aeabi_i2d>
 8006eca:	9a07      	ldr	r2, [sp, #28]
 8006ecc:	4b32      	ldr	r3, [pc, #200]	; (8006f98 <__ieee754_pow+0x778>)
 8006ece:	4413      	add	r3, r2
 8006ed0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ed4:	4606      	mov	r6, r0
 8006ed6:	460f      	mov	r7, r1
 8006ed8:	4652      	mov	r2, sl
 8006eda:	465b      	mov	r3, fp
 8006edc:	ec51 0b18 	vmov	r0, r1, d8
 8006ee0:	f7f9 f9d4 	bl	800028c <__adddf3>
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	464b      	mov	r3, r9
 8006ee8:	f7f9 f9d0 	bl	800028c <__adddf3>
 8006eec:	4632      	mov	r2, r6
 8006eee:	463b      	mov	r3, r7
 8006ef0:	f7f9 f9cc 	bl	800028c <__adddf3>
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	4632      	mov	r2, r6
 8006ef8:	463b      	mov	r3, r7
 8006efa:	4604      	mov	r4, r0
 8006efc:	460d      	mov	r5, r1
 8006efe:	f7f9 f9c3 	bl	8000288 <__aeabi_dsub>
 8006f02:	4642      	mov	r2, r8
 8006f04:	464b      	mov	r3, r9
 8006f06:	f7f9 f9bf 	bl	8000288 <__aeabi_dsub>
 8006f0a:	ec53 2b18 	vmov	r2, r3, d8
 8006f0e:	f7f9 f9bb 	bl	8000288 <__aeabi_dsub>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4650      	mov	r0, sl
 8006f18:	4659      	mov	r1, fp
 8006f1a:	e610      	b.n	8006b3e <__ieee754_pow+0x31e>
 8006f1c:	2401      	movs	r4, #1
 8006f1e:	e6a1      	b.n	8006c64 <__ieee754_pow+0x444>
 8006f20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006f70 <__ieee754_pow+0x750>
 8006f24:	e617      	b.n	8006b56 <__ieee754_pow+0x336>
 8006f26:	bf00      	nop
 8006f28:	4a454eef 	.word	0x4a454eef
 8006f2c:	3fca7e28 	.word	0x3fca7e28
 8006f30:	93c9db65 	.word	0x93c9db65
 8006f34:	3fcd864a 	.word	0x3fcd864a
 8006f38:	a91d4101 	.word	0xa91d4101
 8006f3c:	3fd17460 	.word	0x3fd17460
 8006f40:	518f264d 	.word	0x518f264d
 8006f44:	3fd55555 	.word	0x3fd55555
 8006f48:	db6fabff 	.word	0xdb6fabff
 8006f4c:	3fdb6db6 	.word	0x3fdb6db6
 8006f50:	33333303 	.word	0x33333303
 8006f54:	3fe33333 	.word	0x3fe33333
 8006f58:	e0000000 	.word	0xe0000000
 8006f5c:	3feec709 	.word	0x3feec709
 8006f60:	dc3a03fd 	.word	0xdc3a03fd
 8006f64:	3feec709 	.word	0x3feec709
 8006f68:	145b01f5 	.word	0x145b01f5
 8006f6c:	be3e2fe0 	.word	0xbe3e2fe0
 8006f70:	00000000 	.word	0x00000000
 8006f74:	3ff00000 	.word	0x3ff00000
 8006f78:	7ff00000 	.word	0x7ff00000
 8006f7c:	43400000 	.word	0x43400000
 8006f80:	0003988e 	.word	0x0003988e
 8006f84:	000bb679 	.word	0x000bb679
 8006f88:	08007640 	.word	0x08007640
 8006f8c:	3ff00000 	.word	0x3ff00000
 8006f90:	40080000 	.word	0x40080000
 8006f94:	08007660 	.word	0x08007660
 8006f98:	08007650 	.word	0x08007650
 8006f9c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007274 <__ieee754_pow+0xa54>)
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	f7f9 f971 	bl	800028c <__adddf3>
 8006faa:	4622      	mov	r2, r4
 8006fac:	ec41 0b1a 	vmov	d10, r0, r1
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	4639      	mov	r1, r7
 8006fb6:	f7f9 f967 	bl	8000288 <__aeabi_dsub>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	ec51 0b1a 	vmov	r0, r1, d10
 8006fc2:	f7f9 fda9 	bl	8000b18 <__aeabi_dcmpgt>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	f47f ae04 	bne.w	8006bd4 <__ieee754_pow+0x3b4>
 8006fcc:	4aa4      	ldr	r2, [pc, #656]	; (8007260 <__ieee754_pow+0xa40>)
 8006fce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	f340 8108 	ble.w	80071e8 <__ieee754_pow+0x9c8>
 8006fd8:	151b      	asrs	r3, r3, #20
 8006fda:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006fde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006fe2:	fa4a f303 	asr.w	r3, sl, r3
 8006fe6:	445b      	add	r3, fp
 8006fe8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006fec:	4e9d      	ldr	r6, [pc, #628]	; (8007264 <__ieee754_pow+0xa44>)
 8006fee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006ff2:	4116      	asrs	r6, r2
 8006ff4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	ea23 0106 	bic.w	r1, r3, r6
 8006ffe:	f1c2 0214 	rsb	r2, r2, #20
 8007002:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007006:	fa4a fa02 	asr.w	sl, sl, r2
 800700a:	f1bb 0f00 	cmp.w	fp, #0
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4620      	mov	r0, r4
 8007014:	4629      	mov	r1, r5
 8007016:	bfb8      	it	lt
 8007018:	f1ca 0a00 	rsblt	sl, sl, #0
 800701c:	f7f9 f934 	bl	8000288 <__aeabi_dsub>
 8007020:	ec41 0b19 	vmov	d9, r0, r1
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	ec51 0b19 	vmov	r0, r1, d9
 800702c:	f7f9 f92e 	bl	800028c <__adddf3>
 8007030:	a37b      	add	r3, pc, #492	; (adr r3, 8007220 <__ieee754_pow+0xa00>)
 8007032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007036:	2000      	movs	r0, #0
 8007038:	4604      	mov	r4, r0
 800703a:	460d      	mov	r5, r1
 800703c:	f7f9 fadc 	bl	80005f8 <__aeabi_dmul>
 8007040:	ec53 2b19 	vmov	r2, r3, d9
 8007044:	4606      	mov	r6, r0
 8007046:	460f      	mov	r7, r1
 8007048:	4620      	mov	r0, r4
 800704a:	4629      	mov	r1, r5
 800704c:	f7f9 f91c 	bl	8000288 <__aeabi_dsub>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4640      	mov	r0, r8
 8007056:	4649      	mov	r1, r9
 8007058:	f7f9 f916 	bl	8000288 <__aeabi_dsub>
 800705c:	a372      	add	r3, pc, #456	; (adr r3, 8007228 <__ieee754_pow+0xa08>)
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	f7f9 fac9 	bl	80005f8 <__aeabi_dmul>
 8007066:	a372      	add	r3, pc, #456	; (adr r3, 8007230 <__ieee754_pow+0xa10>)
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	4680      	mov	r8, r0
 800706e:	4689      	mov	r9, r1
 8007070:	4620      	mov	r0, r4
 8007072:	4629      	mov	r1, r5
 8007074:	f7f9 fac0 	bl	80005f8 <__aeabi_dmul>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4640      	mov	r0, r8
 800707e:	4649      	mov	r1, r9
 8007080:	f7f9 f904 	bl	800028c <__adddf3>
 8007084:	4604      	mov	r4, r0
 8007086:	460d      	mov	r5, r1
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4630      	mov	r0, r6
 800708e:	4639      	mov	r1, r7
 8007090:	f7f9 f8fc 	bl	800028c <__adddf3>
 8007094:	4632      	mov	r2, r6
 8007096:	463b      	mov	r3, r7
 8007098:	4680      	mov	r8, r0
 800709a:	4689      	mov	r9, r1
 800709c:	f7f9 f8f4 	bl	8000288 <__aeabi_dsub>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4620      	mov	r0, r4
 80070a6:	4629      	mov	r1, r5
 80070a8:	f7f9 f8ee 	bl	8000288 <__aeabi_dsub>
 80070ac:	4642      	mov	r2, r8
 80070ae:	4606      	mov	r6, r0
 80070b0:	460f      	mov	r7, r1
 80070b2:	464b      	mov	r3, r9
 80070b4:	4640      	mov	r0, r8
 80070b6:	4649      	mov	r1, r9
 80070b8:	f7f9 fa9e 	bl	80005f8 <__aeabi_dmul>
 80070bc:	a35e      	add	r3, pc, #376	; (adr r3, 8007238 <__ieee754_pow+0xa18>)
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	4604      	mov	r4, r0
 80070c4:	460d      	mov	r5, r1
 80070c6:	f7f9 fa97 	bl	80005f8 <__aeabi_dmul>
 80070ca:	a35d      	add	r3, pc, #372	; (adr r3, 8007240 <__ieee754_pow+0xa20>)
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f7f9 f8da 	bl	8000288 <__aeabi_dsub>
 80070d4:	4622      	mov	r2, r4
 80070d6:	462b      	mov	r3, r5
 80070d8:	f7f9 fa8e 	bl	80005f8 <__aeabi_dmul>
 80070dc:	a35a      	add	r3, pc, #360	; (adr r3, 8007248 <__ieee754_pow+0xa28>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f7f9 f8d3 	bl	800028c <__adddf3>
 80070e6:	4622      	mov	r2, r4
 80070e8:	462b      	mov	r3, r5
 80070ea:	f7f9 fa85 	bl	80005f8 <__aeabi_dmul>
 80070ee:	a358      	add	r3, pc, #352	; (adr r3, 8007250 <__ieee754_pow+0xa30>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 f8c8 	bl	8000288 <__aeabi_dsub>
 80070f8:	4622      	mov	r2, r4
 80070fa:	462b      	mov	r3, r5
 80070fc:	f7f9 fa7c 	bl	80005f8 <__aeabi_dmul>
 8007100:	a355      	add	r3, pc, #340	; (adr r3, 8007258 <__ieee754_pow+0xa38>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	f7f9 f8c1 	bl	800028c <__adddf3>
 800710a:	4622      	mov	r2, r4
 800710c:	462b      	mov	r3, r5
 800710e:	f7f9 fa73 	bl	80005f8 <__aeabi_dmul>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4640      	mov	r0, r8
 8007118:	4649      	mov	r1, r9
 800711a:	f7f9 f8b5 	bl	8000288 <__aeabi_dsub>
 800711e:	4604      	mov	r4, r0
 8007120:	460d      	mov	r5, r1
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	4640      	mov	r0, r8
 8007128:	4649      	mov	r1, r9
 800712a:	f7f9 fa65 	bl	80005f8 <__aeabi_dmul>
 800712e:	2200      	movs	r2, #0
 8007130:	ec41 0b19 	vmov	d9, r0, r1
 8007134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007138:	4620      	mov	r0, r4
 800713a:	4629      	mov	r1, r5
 800713c:	f7f9 f8a4 	bl	8000288 <__aeabi_dsub>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	ec51 0b19 	vmov	r0, r1, d9
 8007148:	f7f9 fb80 	bl	800084c <__aeabi_ddiv>
 800714c:	4632      	mov	r2, r6
 800714e:	4604      	mov	r4, r0
 8007150:	460d      	mov	r5, r1
 8007152:	463b      	mov	r3, r7
 8007154:	4640      	mov	r0, r8
 8007156:	4649      	mov	r1, r9
 8007158:	f7f9 fa4e 	bl	80005f8 <__aeabi_dmul>
 800715c:	4632      	mov	r2, r6
 800715e:	463b      	mov	r3, r7
 8007160:	f7f9 f894 	bl	800028c <__adddf3>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4620      	mov	r0, r4
 800716a:	4629      	mov	r1, r5
 800716c:	f7f9 f88c 	bl	8000288 <__aeabi_dsub>
 8007170:	4642      	mov	r2, r8
 8007172:	464b      	mov	r3, r9
 8007174:	f7f9 f888 	bl	8000288 <__aeabi_dsub>
 8007178:	460b      	mov	r3, r1
 800717a:	4602      	mov	r2, r0
 800717c:	493a      	ldr	r1, [pc, #232]	; (8007268 <__ieee754_pow+0xa48>)
 800717e:	2000      	movs	r0, #0
 8007180:	f7f9 f882 	bl	8000288 <__aeabi_dsub>
 8007184:	ec41 0b10 	vmov	d0, r0, r1
 8007188:	ee10 3a90 	vmov	r3, s1
 800718c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007194:	da2b      	bge.n	80071ee <__ieee754_pow+0x9ce>
 8007196:	4650      	mov	r0, sl
 8007198:	f000 f966 	bl	8007468 <scalbn>
 800719c:	ec51 0b10 	vmov	r0, r1, d0
 80071a0:	ec53 2b18 	vmov	r2, r3, d8
 80071a4:	f7ff bbed 	b.w	8006982 <__ieee754_pow+0x162>
 80071a8:	4b30      	ldr	r3, [pc, #192]	; (800726c <__ieee754_pow+0xa4c>)
 80071aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80071ae:	429e      	cmp	r6, r3
 80071b0:	f77f af0c 	ble.w	8006fcc <__ieee754_pow+0x7ac>
 80071b4:	4b2e      	ldr	r3, [pc, #184]	; (8007270 <__ieee754_pow+0xa50>)
 80071b6:	440b      	add	r3, r1
 80071b8:	4303      	orrs	r3, r0
 80071ba:	d009      	beq.n	80071d0 <__ieee754_pow+0x9b0>
 80071bc:	ec51 0b18 	vmov	r0, r1, d8
 80071c0:	2200      	movs	r2, #0
 80071c2:	2300      	movs	r3, #0
 80071c4:	f7f9 fc8a 	bl	8000adc <__aeabi_dcmplt>
 80071c8:	3800      	subs	r0, #0
 80071ca:	bf18      	it	ne
 80071cc:	2001      	movne	r0, #1
 80071ce:	e447      	b.n	8006a60 <__ieee754_pow+0x240>
 80071d0:	4622      	mov	r2, r4
 80071d2:	462b      	mov	r3, r5
 80071d4:	f7f9 f858 	bl	8000288 <__aeabi_dsub>
 80071d8:	4642      	mov	r2, r8
 80071da:	464b      	mov	r3, r9
 80071dc:	f7f9 fc92 	bl	8000b04 <__aeabi_dcmpge>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f43f aef3 	beq.w	8006fcc <__ieee754_pow+0x7ac>
 80071e6:	e7e9      	b.n	80071bc <__ieee754_pow+0x99c>
 80071e8:	f04f 0a00 	mov.w	sl, #0
 80071ec:	e71a      	b.n	8007024 <__ieee754_pow+0x804>
 80071ee:	ec51 0b10 	vmov	r0, r1, d0
 80071f2:	4619      	mov	r1, r3
 80071f4:	e7d4      	b.n	80071a0 <__ieee754_pow+0x980>
 80071f6:	491c      	ldr	r1, [pc, #112]	; (8007268 <__ieee754_pow+0xa48>)
 80071f8:	2000      	movs	r0, #0
 80071fa:	f7ff bb30 	b.w	800685e <__ieee754_pow+0x3e>
 80071fe:	2000      	movs	r0, #0
 8007200:	2100      	movs	r1, #0
 8007202:	f7ff bb2c 	b.w	800685e <__ieee754_pow+0x3e>
 8007206:	4630      	mov	r0, r6
 8007208:	4639      	mov	r1, r7
 800720a:	f7ff bb28 	b.w	800685e <__ieee754_pow+0x3e>
 800720e:	9204      	str	r2, [sp, #16]
 8007210:	f7ff bb7a 	b.w	8006908 <__ieee754_pow+0xe8>
 8007214:	2300      	movs	r3, #0
 8007216:	f7ff bb64 	b.w	80068e2 <__ieee754_pow+0xc2>
 800721a:	bf00      	nop
 800721c:	f3af 8000 	nop.w
 8007220:	00000000 	.word	0x00000000
 8007224:	3fe62e43 	.word	0x3fe62e43
 8007228:	fefa39ef 	.word	0xfefa39ef
 800722c:	3fe62e42 	.word	0x3fe62e42
 8007230:	0ca86c39 	.word	0x0ca86c39
 8007234:	be205c61 	.word	0xbe205c61
 8007238:	72bea4d0 	.word	0x72bea4d0
 800723c:	3e663769 	.word	0x3e663769
 8007240:	c5d26bf1 	.word	0xc5d26bf1
 8007244:	3ebbbd41 	.word	0x3ebbbd41
 8007248:	af25de2c 	.word	0xaf25de2c
 800724c:	3f11566a 	.word	0x3f11566a
 8007250:	16bebd93 	.word	0x16bebd93
 8007254:	3f66c16c 	.word	0x3f66c16c
 8007258:	5555553e 	.word	0x5555553e
 800725c:	3fc55555 	.word	0x3fc55555
 8007260:	3fe00000 	.word	0x3fe00000
 8007264:	000fffff 	.word	0x000fffff
 8007268:	3ff00000 	.word	0x3ff00000
 800726c:	4090cbff 	.word	0x4090cbff
 8007270:	3f6f3400 	.word	0x3f6f3400
 8007274:	652b82fe 	.word	0x652b82fe
 8007278:	3c971547 	.word	0x3c971547

0800727c <__ieee754_sqrt>:
 800727c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007280:	ec55 4b10 	vmov	r4, r5, d0
 8007284:	4e55      	ldr	r6, [pc, #340]	; (80073dc <__ieee754_sqrt+0x160>)
 8007286:	43ae      	bics	r6, r5
 8007288:	ee10 0a10 	vmov	r0, s0
 800728c:	ee10 3a10 	vmov	r3, s0
 8007290:	462a      	mov	r2, r5
 8007292:	4629      	mov	r1, r5
 8007294:	d110      	bne.n	80072b8 <__ieee754_sqrt+0x3c>
 8007296:	ee10 2a10 	vmov	r2, s0
 800729a:	462b      	mov	r3, r5
 800729c:	f7f9 f9ac 	bl	80005f8 <__aeabi_dmul>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4620      	mov	r0, r4
 80072a6:	4629      	mov	r1, r5
 80072a8:	f7f8 fff0 	bl	800028c <__adddf3>
 80072ac:	4604      	mov	r4, r0
 80072ae:	460d      	mov	r5, r1
 80072b0:	ec45 4b10 	vmov	d0, r4, r5
 80072b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	dc10      	bgt.n	80072de <__ieee754_sqrt+0x62>
 80072bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80072c0:	4330      	orrs	r0, r6
 80072c2:	d0f5      	beq.n	80072b0 <__ieee754_sqrt+0x34>
 80072c4:	b15d      	cbz	r5, 80072de <__ieee754_sqrt+0x62>
 80072c6:	ee10 2a10 	vmov	r2, s0
 80072ca:	462b      	mov	r3, r5
 80072cc:	ee10 0a10 	vmov	r0, s0
 80072d0:	f7f8 ffda 	bl	8000288 <__aeabi_dsub>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	f7f9 fab8 	bl	800084c <__aeabi_ddiv>
 80072dc:	e7e6      	b.n	80072ac <__ieee754_sqrt+0x30>
 80072de:	1512      	asrs	r2, r2, #20
 80072e0:	d074      	beq.n	80073cc <__ieee754_sqrt+0x150>
 80072e2:	07d4      	lsls	r4, r2, #31
 80072e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80072e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80072ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80072f0:	bf5e      	ittt	pl
 80072f2:	0fda      	lsrpl	r2, r3, #31
 80072f4:	005b      	lslpl	r3, r3, #1
 80072f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80072fa:	2400      	movs	r4, #0
 80072fc:	0fda      	lsrs	r2, r3, #31
 80072fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007302:	107f      	asrs	r7, r7, #1
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	2516      	movs	r5, #22
 8007308:	4620      	mov	r0, r4
 800730a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800730e:	1886      	adds	r6, r0, r2
 8007310:	428e      	cmp	r6, r1
 8007312:	bfde      	ittt	le
 8007314:	1b89      	suble	r1, r1, r6
 8007316:	18b0      	addle	r0, r6, r2
 8007318:	18a4      	addle	r4, r4, r2
 800731a:	0049      	lsls	r1, r1, #1
 800731c:	3d01      	subs	r5, #1
 800731e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007322:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007326:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800732a:	d1f0      	bne.n	800730e <__ieee754_sqrt+0x92>
 800732c:	462a      	mov	r2, r5
 800732e:	f04f 0e20 	mov.w	lr, #32
 8007332:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007336:	4281      	cmp	r1, r0
 8007338:	eb06 0c05 	add.w	ip, r6, r5
 800733c:	dc02      	bgt.n	8007344 <__ieee754_sqrt+0xc8>
 800733e:	d113      	bne.n	8007368 <__ieee754_sqrt+0xec>
 8007340:	459c      	cmp	ip, r3
 8007342:	d811      	bhi.n	8007368 <__ieee754_sqrt+0xec>
 8007344:	f1bc 0f00 	cmp.w	ip, #0
 8007348:	eb0c 0506 	add.w	r5, ip, r6
 800734c:	da43      	bge.n	80073d6 <__ieee754_sqrt+0x15a>
 800734e:	2d00      	cmp	r5, #0
 8007350:	db41      	blt.n	80073d6 <__ieee754_sqrt+0x15a>
 8007352:	f100 0801 	add.w	r8, r0, #1
 8007356:	1a09      	subs	r1, r1, r0
 8007358:	459c      	cmp	ip, r3
 800735a:	bf88      	it	hi
 800735c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007360:	eba3 030c 	sub.w	r3, r3, ip
 8007364:	4432      	add	r2, r6
 8007366:	4640      	mov	r0, r8
 8007368:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800736c:	f1be 0e01 	subs.w	lr, lr, #1
 8007370:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007374:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007378:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800737c:	d1db      	bne.n	8007336 <__ieee754_sqrt+0xba>
 800737e:	430b      	orrs	r3, r1
 8007380:	d006      	beq.n	8007390 <__ieee754_sqrt+0x114>
 8007382:	1c50      	adds	r0, r2, #1
 8007384:	bf13      	iteet	ne
 8007386:	3201      	addne	r2, #1
 8007388:	3401      	addeq	r4, #1
 800738a:	4672      	moveq	r2, lr
 800738c:	f022 0201 	bicne.w	r2, r2, #1
 8007390:	1063      	asrs	r3, r4, #1
 8007392:	0852      	lsrs	r2, r2, #1
 8007394:	07e1      	lsls	r1, r4, #31
 8007396:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800739a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800739e:	bf48      	it	mi
 80073a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80073a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80073a8:	4614      	mov	r4, r2
 80073aa:	e781      	b.n	80072b0 <__ieee754_sqrt+0x34>
 80073ac:	0ad9      	lsrs	r1, r3, #11
 80073ae:	3815      	subs	r0, #21
 80073b0:	055b      	lsls	r3, r3, #21
 80073b2:	2900      	cmp	r1, #0
 80073b4:	d0fa      	beq.n	80073ac <__ieee754_sqrt+0x130>
 80073b6:	02cd      	lsls	r5, r1, #11
 80073b8:	d50a      	bpl.n	80073d0 <__ieee754_sqrt+0x154>
 80073ba:	f1c2 0420 	rsb	r4, r2, #32
 80073be:	fa23 f404 	lsr.w	r4, r3, r4
 80073c2:	1e55      	subs	r5, r2, #1
 80073c4:	4093      	lsls	r3, r2
 80073c6:	4321      	orrs	r1, r4
 80073c8:	1b42      	subs	r2, r0, r5
 80073ca:	e78a      	b.n	80072e2 <__ieee754_sqrt+0x66>
 80073cc:	4610      	mov	r0, r2
 80073ce:	e7f0      	b.n	80073b2 <__ieee754_sqrt+0x136>
 80073d0:	0049      	lsls	r1, r1, #1
 80073d2:	3201      	adds	r2, #1
 80073d4:	e7ef      	b.n	80073b6 <__ieee754_sqrt+0x13a>
 80073d6:	4680      	mov	r8, r0
 80073d8:	e7bd      	b.n	8007356 <__ieee754_sqrt+0xda>
 80073da:	bf00      	nop
 80073dc:	7ff00000 	.word	0x7ff00000

080073e0 <with_errno>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	4604      	mov	r4, r0
 80073e4:	460d      	mov	r5, r1
 80073e6:	4616      	mov	r6, r2
 80073e8:	f7fe fcf6 	bl	8005dd8 <__errno>
 80073ec:	4629      	mov	r1, r5
 80073ee:	6006      	str	r6, [r0, #0]
 80073f0:	4620      	mov	r0, r4
 80073f2:	bd70      	pop	{r4, r5, r6, pc}

080073f4 <xflow>:
 80073f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073f6:	4614      	mov	r4, r2
 80073f8:	461d      	mov	r5, r3
 80073fa:	b108      	cbz	r0, 8007400 <xflow+0xc>
 80073fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007400:	e9cd 2300 	strd	r2, r3, [sp]
 8007404:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007408:	4620      	mov	r0, r4
 800740a:	4629      	mov	r1, r5
 800740c:	f7f9 f8f4 	bl	80005f8 <__aeabi_dmul>
 8007410:	2222      	movs	r2, #34	; 0x22
 8007412:	b003      	add	sp, #12
 8007414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007418:	f7ff bfe2 	b.w	80073e0 <with_errno>

0800741c <__math_uflow>:
 800741c:	b508      	push	{r3, lr}
 800741e:	2200      	movs	r2, #0
 8007420:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007424:	f7ff ffe6 	bl	80073f4 <xflow>
 8007428:	ec41 0b10 	vmov	d0, r0, r1
 800742c:	bd08      	pop	{r3, pc}

0800742e <__math_oflow>:
 800742e:	b508      	push	{r3, lr}
 8007430:	2200      	movs	r2, #0
 8007432:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007436:	f7ff ffdd 	bl	80073f4 <xflow>
 800743a:	ec41 0b10 	vmov	d0, r0, r1
 800743e:	bd08      	pop	{r3, pc}

08007440 <fabs>:
 8007440:	ec51 0b10 	vmov	r0, r1, d0
 8007444:	ee10 2a10 	vmov	r2, s0
 8007448:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800744c:	ec43 2b10 	vmov	d0, r2, r3
 8007450:	4770      	bx	lr

08007452 <finite>:
 8007452:	b082      	sub	sp, #8
 8007454:	ed8d 0b00 	vstr	d0, [sp]
 8007458:	9801      	ldr	r0, [sp, #4]
 800745a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800745e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007462:	0fc0      	lsrs	r0, r0, #31
 8007464:	b002      	add	sp, #8
 8007466:	4770      	bx	lr

08007468 <scalbn>:
 8007468:	b570      	push	{r4, r5, r6, lr}
 800746a:	ec55 4b10 	vmov	r4, r5, d0
 800746e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007472:	4606      	mov	r6, r0
 8007474:	462b      	mov	r3, r5
 8007476:	b99a      	cbnz	r2, 80074a0 <scalbn+0x38>
 8007478:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800747c:	4323      	orrs	r3, r4
 800747e:	d036      	beq.n	80074ee <scalbn+0x86>
 8007480:	4b39      	ldr	r3, [pc, #228]	; (8007568 <scalbn+0x100>)
 8007482:	4629      	mov	r1, r5
 8007484:	ee10 0a10 	vmov	r0, s0
 8007488:	2200      	movs	r2, #0
 800748a:	f7f9 f8b5 	bl	80005f8 <__aeabi_dmul>
 800748e:	4b37      	ldr	r3, [pc, #220]	; (800756c <scalbn+0x104>)
 8007490:	429e      	cmp	r6, r3
 8007492:	4604      	mov	r4, r0
 8007494:	460d      	mov	r5, r1
 8007496:	da10      	bge.n	80074ba <scalbn+0x52>
 8007498:	a32b      	add	r3, pc, #172	; (adr r3, 8007548 <scalbn+0xe0>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	e03a      	b.n	8007516 <scalbn+0xae>
 80074a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80074a4:	428a      	cmp	r2, r1
 80074a6:	d10c      	bne.n	80074c2 <scalbn+0x5a>
 80074a8:	ee10 2a10 	vmov	r2, s0
 80074ac:	4620      	mov	r0, r4
 80074ae:	4629      	mov	r1, r5
 80074b0:	f7f8 feec 	bl	800028c <__adddf3>
 80074b4:	4604      	mov	r4, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	e019      	b.n	80074ee <scalbn+0x86>
 80074ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80074be:	460b      	mov	r3, r1
 80074c0:	3a36      	subs	r2, #54	; 0x36
 80074c2:	4432      	add	r2, r6
 80074c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80074c8:	428a      	cmp	r2, r1
 80074ca:	dd08      	ble.n	80074de <scalbn+0x76>
 80074cc:	2d00      	cmp	r5, #0
 80074ce:	a120      	add	r1, pc, #128	; (adr r1, 8007550 <scalbn+0xe8>)
 80074d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d4:	da1c      	bge.n	8007510 <scalbn+0xa8>
 80074d6:	a120      	add	r1, pc, #128	; (adr r1, 8007558 <scalbn+0xf0>)
 80074d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074dc:	e018      	b.n	8007510 <scalbn+0xa8>
 80074de:	2a00      	cmp	r2, #0
 80074e0:	dd08      	ble.n	80074f4 <scalbn+0x8c>
 80074e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80074e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80074ee:	ec45 4b10 	vmov	d0, r4, r5
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80074f8:	da19      	bge.n	800752e <scalbn+0xc6>
 80074fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80074fe:	429e      	cmp	r6, r3
 8007500:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007504:	dd0a      	ble.n	800751c <scalbn+0xb4>
 8007506:	a112      	add	r1, pc, #72	; (adr r1, 8007550 <scalbn+0xe8>)
 8007508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e2      	bne.n	80074d6 <scalbn+0x6e>
 8007510:	a30f      	add	r3, pc, #60	; (adr r3, 8007550 <scalbn+0xe8>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f9 f86f 	bl	80005f8 <__aeabi_dmul>
 800751a:	e7cb      	b.n	80074b4 <scalbn+0x4c>
 800751c:	a10a      	add	r1, pc, #40	; (adr r1, 8007548 <scalbn+0xe0>)
 800751e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d0b8      	beq.n	8007498 <scalbn+0x30>
 8007526:	a10e      	add	r1, pc, #56	; (adr r1, 8007560 <scalbn+0xf8>)
 8007528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800752c:	e7b4      	b.n	8007498 <scalbn+0x30>
 800752e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007532:	3236      	adds	r2, #54	; 0x36
 8007534:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007538:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800753c:	4620      	mov	r0, r4
 800753e:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <scalbn+0x108>)
 8007540:	2200      	movs	r2, #0
 8007542:	e7e8      	b.n	8007516 <scalbn+0xae>
 8007544:	f3af 8000 	nop.w
 8007548:	c2f8f359 	.word	0xc2f8f359
 800754c:	01a56e1f 	.word	0x01a56e1f
 8007550:	8800759c 	.word	0x8800759c
 8007554:	7e37e43c 	.word	0x7e37e43c
 8007558:	8800759c 	.word	0x8800759c
 800755c:	fe37e43c 	.word	0xfe37e43c
 8007560:	c2f8f359 	.word	0xc2f8f359
 8007564:	81a56e1f 	.word	0x81a56e1f
 8007568:	43500000 	.word	0x43500000
 800756c:	ffff3cb0 	.word	0xffff3cb0
 8007570:	3c900000 	.word	0x3c900000

08007574 <_init>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	bf00      	nop
 8007578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757a:	bc08      	pop	{r3}
 800757c:	469e      	mov	lr, r3
 800757e:	4770      	bx	lr

08007580 <_fini>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr
